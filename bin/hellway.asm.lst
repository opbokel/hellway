------- FILE hellway.asm LEVEL 1 PASS 2
      1  10000 ????						; Hellway! 
      2  10000 ????						; Thanks to AtariAge and all available online docs 
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE hellway.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE hellway.asm
      6  f000					      org	$F000
      7  f000
      8  f000							;contants
      9  f000		       00 48	   SCREEN_SIZE =	72	;(VSy)
     10  f000		       00 05	   SCORE_SIZE =	5
     11  f000		       00 42	   GAMEPLAY_AREA =	SCREEN_SIZE - SCORE_SIZE - 1	;
     12  f000		       00 04	   FONT_OFFSET =	#SCORE_SIZE -1
     13  f000		       00 ff	   COLLISION_FRAMES =	$FF	; 4,5 seconds
     14  f000		       00 ff	   SCORE_FONT_HOLD_CHANGE =	$FF	; 4,5 seconds
     15  f000		       00 10	   COLLISION_SPEED_L =	$10	;
     16  f000
     17  f000		       00 0a	   WARN_TIME_ENDING =	10	; Exclusive
     18  f000
     19  f000		       00 05	   TRAFFIC_LINE_COUNT =	5
     20  f000							;16 bit precision
     21  f000							;640 max speed!
     22  f000		       00 02	   CAR_MAX_SPEED_H =	$02	; L is in a table
     23  f000
     24  f000		       00 00	   CAR_MIN_SPEED_H =	0
     25  f000		       00 00	   CAR_MIN_SPEED_L =	0
     26  f000		       00 0e	   CAR_START_LINE =	14	; Exclusive
     27  f000
     28  f000		       00 00	   CAR_ID_DEFAULT =	0
     29  f000		       00 01	   CAR_ID_HATCHBACK =	1
     30  f000		       00 02	   CAR_ID_SEDAN =	2
     31  f000		       00 03	   CAR_ID_DRAGSTER =	3
     32  f000
     33  f000		       00 01	   DRAGSTER_TURN_MASK =	%00000001	;
     34  f000
     35  f000		       00 0a	   BREAK_SPEED =	10
     36  f000							;For now, will use in all rows until figure out if make it dynamic or not.
     37  f000		       00 f8	   TRAFFIC_1_MASK =	%11111000	;Min car size... Maybe make different per track
     38  f000
     39  f000		       00 0e	   TRAFFIC_CHANCE_LIGHT =	14
     40  f000		       00 1d	   CHECKPOINT_TIME_LIGHT =	29
     41  f000		       00 d4	   TRAFFIC_COLOR_LIGHT =	$D4
     42  f000
     43  f000		       00 18	   TRAFFIC_CHANCE_REGULAR =	24
     44  f000		       00 22	   CHECKPOINT_TIME_REGULAR =	34
     45  f000		       00 34	   TRAFFIC_COLOR_REGULAR =	$34
     46  f000
     47  f000		       00 22	   TRAFFIC_CHANCE_INTENSE =	34
     48  f000		       00 27	   CHECKPOINT_TIME_INTENSE =	39
     49  f000		       00 79	   TRAFFIC_COLOR_INTENSE =	$79
     50  f000
     51  f000		       00 2c	   TRAFFIC_CHANCE_RUSH_HOUR =	44
     52  f000		       00 2c	   CHECKPOINT_TIME_RUSH_HOUR =	44
     53  f000		       00 09	   TRAFFIC_COLOR_RUSH_HOUR =	$09
     54  f000
     55  f000		       00 03	   BACKGROUND_COLOR =	$03	;Grey
     56  f000		       00 a0	   SCORE_BACKGROUND_COLOR =	$A0
     57  f000
     58  f000		       00 38	   SCORE_FONT_COLOR_EASTER_EGG =	$38
     59  f000
     60  f000		       00 96	   PLAYER1_COLOR =	$96
     61  f000
     62  f000		       00 f9	   SCORE_FONT_COLOR =	$F9
     63  f000		       00 d8	   SCORE_FONT_COLOR_GOOD =	$D8
     64  f000		       00 44	   SCORE_FONT_COLOR_BAD =	$44
     65  f000		       00 c8	   SCORE_FONT_COLOR_START =	$C8	;Cannot be the same as good, font colors = game state
     66  f000		       00 0c	   SCORE_FONT_COLOR_OVER =	$0C
     67  f000
     68  f000		       00 35	   PLAYER_0_X_START =	$35	;
     69  f000		       00 36	   PLAYER_0_MAX_X =	$36	; Going left will underflow to FF, so it only have to be less (unsigned) than this
     70  f000
     71  f000		       00 5a	   INITIAL_COUNTDOWN_TIME =	90	; Seconds +-
     72  f000		       00 10	   CHECKPOINT_INTERVAL =	$10	; Acts uppon TrafficOffset0 + 3
     73  f000		       00 01	   TIMEOVER_BREAK_SPEED =	1
     74  f000
     75  f000		       00 1e	   SWITCHES_DEBOUNCE_TIME =	30	; Frames
     76  f000
     77  f000		       00 00	   BLACK      =	$00	;
     78  f000
     79  f000		       00 10	   MAX_GAME_MODE =	16
     80  f000
     81  f000		       00 08	   PARALLAX_SIZE =	8
     82  f000
     83  f000		       00 05	   HALF_TEXT_SIZE =	5
     84  f000
     85  f000		       00 3c	   ONE_SECOND_FRAMES =	60
     86  f000
     87  f000		       00 49	   VERSION_COLOR =	$49
     88  f000
     89  f000		       00 07	   QR_CODE_LINE_HEIGHT =	7
     90  f000		       00 0f	   QR_CODE_BACKGROUNG =	$0F
     91  f000		       00 00	   QR_CODE_COLOR =	$00
     92  f000		       00 19	   QR_CODE_SIZE =	25
     93  f000
     94  f000		       00 03	   CURRENT_CAR_MASK =	%00000011	; 4 cars
     95  f000
     96  f000							;43 default, one less line 2 We start the drawing cycle after 36 lines, because drawing is delayed by one line. 
     97  f000		       00 29	   VBLANK_TIMER =	41
     98  f000							;Almost no game processing with QR code. This gives bleading space by reducing vblank (Still acceptable limits)
     99  f000		       00 1a	   VBLANK_TIMER_QR_CODE =	26	; 22 lines 
    100  f000
    101  f000		       00 80	   GRP0Cache  =	$80
    102  f000		       00 81	   PF0Cache   =	$81
    103  f000		       00 82	   PF1Cache   =	$82
    104  f000		       00 83	   PF2Cache   =	$83
    105  f000		       00 84	   GRP1Cache  =	$84
    106  f000		       00 85	   ENABLCache =	$85
    107  f000		       00 86	   ENAM0Cache =	$86
    108  f000		       00 87	   ENAM1Cache =	$87
    109  f000
    110  f000		       00 88	   ParallaxMode =	$88
    111  f000
    112  f000		       00 8c	   FrameCount0 =	$8C	;
    113  f000		       00 8d	   FrameCount1 =	$8D	;
    114  f000
    115  f000		       00 8e	   Player0SpeedL =	$8E
    116  f000		       00 8f	   Player0SpeedH =	$8F
    117  f000
    118  f000		       00 90	   TrafficOffset0 =	$90	; Border $91 $92 (24 bit) $93 is cache
    119  f000		       00 94	   TrafficOffset1 =	$94	; Traffic 1 $94 $95 (24 bit) $96 is cache
    120  f000		       00 98	   TrafficOffset2 =	$98	; Traffic 1 $99 $9A (24 bit) $9B is cache
    121  f000		       00 9c	   TrafficOffset3 =	$9C	; Traffic 1 $9D $9E (24 bit) $9F is cache
    122  f000		       00 a0	   TrafficOffset4 =	$A0	; Traffic 1 $A1 $A2 (24 bit) $A3 is cache
    123  f000
    124  f000		       00 a4	   CheckpointBcd0 =	$A4
    125  f000		       00 a5	   CheckpointBcd1 =	$A5
    126  f000		       00 a6	   StartSWCHB =	$A6	; Used for Score, so it cannot be cheated.
    127  f000		       00 a7	   CarSpritePointerL =	$A7
    128  f000		       00 a8	   CarSpritePointerH =	$A8
    129  f000		       00 a9	   CurrentCarId =	$A9
    130  f000		       00 aa	   AccelerateBuffer =	$AA	; Change speed on buffer overflow.
    131  f000		       00 ab	   TextSide   =	$AB
    132  f000		       00 ac	   TextFlickerMode =	$AC
    133  f000		       00 ad	   Gear       =	$AD
    134  f000
    135  f000							;Temporary variables, multiple uses
    136  f000		       00 b0	   Tmp0       =	$B0
    137  f000		       00 b1	   Tmp1       =	$B1
    138  f000		       00 b2	   Tmp2       =	$B2
    139  f000		       00 b3	   Tmp3       =	$B3
    140  f000
    141  f000		       00 b4	   ScoreBcd0  =	$B4
    142  f000		       00 b5	   ScoreBcd1  =	$B5
    143  f000		       00 b6	   ScoreBcd2  =	$B6
    144  f000		       00 b7	   ScoreBcd3  =	$B7
    145  f000
    146  f000		       00 b8	   CollisionCounter =	$B8
    147  f000		       00 b9	   Player0X   =	$B9
    148  f000		       00 ba	   CountdownTimer =	$BA
    149  f000		       00 bb	   Traffic0Msb =	$BB
    150  f000		       00 bc	   SwitchDebounceCounter =	$BC
    151  f000
    152  f000		       00 bd	   TimeBcd0   =	$BD
    153  f000		       00 be	   TimeBcd1   =	$BE
    154  f000		       00 bf	   TimeBcd2   =	$BF
    155  f000
    156  f000		       00 c0	   GameStatus =	$C0	; Not zero is running! No need to make it a bit flag for now.
    157  f000		       00 c1	   TrafficChance =	$C1
    158  f000		       00 c2	   CheckpointTime =	$C2
    159  f000		       00 c3	   TrafficColor =	$C3
    160  f000		       00 c4	   CurrentDifficulty =	$C4
    161  f000		       00 c5	   GameMode   =	$C5	; Bit 0 controls fixed levels, bit 1 random positions, 
    162  f000							;Bit 2 speed delta, Bit 3 random traffic 
    163  f000
    164  f000		       00 c6	   ParallaxOffset1 =	$C6	; C7 
    165  f000		       00 c8	   ParallaxOffset2 =	$C8	; C9
    166  f000
    167  f000		       00 ca	   BorderType =	$CA
    168  f000
    169  f000		       00 cb	   HitCountBcd0 =	$CB
    170  f000		       00 cc	   HitCountBcd1 =	$CC
    171  f000
    172  f000		       00 cd	   GlideTimeBcd0 =	$CD
    173  f000		       00 ce	   GlideTimeBcd1 =	$CE
    174  f000
    175  f000		       00 cf	   OneSecondConter =	$CF
    176  f000
    177  f000		       00 d0	   ScoreD0    =	$D0
    178  f000		       00 d1	   ScoreD1    =	$D1
    179  f000		       00 d2	   ScoreD2    =	$D2
    180  f000		       00 d3	   ScoreD3    =	$D3
    181  f000		       00 d4	   ScoreD4    =	$D4
    182  f000		       00 d5	   ScoreFontColor =	$D5
    183  f000		       00 d6	   ScoreFontColorHoldChange =	$D6
    184  f000		       00 d7	   NextCheckpoint =	$D7
    185  f000
    186  f000		       00 d8	   ParallaxCache =	$D8	; to $DF
    187  f000		       00 f0	   ParallaxCache2 =	$F0	; to F7
    188  f000
    189  f000
    190  f000							;generic start up stuff, put zero in almost all...
    191  f000				   BeforeStart		;All variables that are kept on game reset or select
    192  f000		       a0 00		      LDY	#0
    193  f002		       84 bc		      STY	SwitchDebounceCounter
    194  f004		       84 c4		      STY	CurrentDifficulty
    195  f006		       84 c0		      STY	GameStatus
    196  f008		       a0 10		      LDY	#16
    197  f00a		       84 c5		      STY	GameMode
    198  f00c		       a0 e0		      LDY	#%11100000	; Default Parallax
    199  f00e		       84 88		      STY	ParallaxMode
    200  f010		       a0 03		      LDY	#CURRENT_CAR_MASK	; Also the max id.
    201  f012		       84 a9		      STY	CurrentCarId
    202  f014
    203  f014				   Start
    204  f014		       78		      SEI
    205  f015		       d8		      CLD
    206  f016		       a2 ff		      LDX	#$FF
    207  f018		       9a		      TXS
    208  f019		       a9 00		      LDA	#0
    209  f01b				   ClearMem
    210  f01b		       e0 bc		      CPX	#SwitchDebounceCounter
    211  f01d		       f0 16		      BEQ	SkipClean
    212  f01f		       e0 c5		      CPX	#GameMode
    213  f021		       f0 12		      BEQ	SkipClean
    214  f023		       e0 88		      CPX	#ParallaxMode
    215  f025		       f0 0e		      BEQ	SkipClean
    216  f027		       e0 a9		      CPX	#CurrentCarId
    217  f029		       f0 0a		      BEQ	SkipClean
    218  f02b		       e0 c4		      CPX	#CurrentDifficulty
    219  f02d		       f0 06		      BEQ	SkipClean
    220  f02f		       e0 c0		      CPX	#GameStatus
    221  f031		       f0 02		      BEQ	SkipClean
    222  f033		       95 00		      STA	0,X
    223  f035				   SkipClean
    224  f035		       ca		      DEX
    225  f036		       d0 e3		      BNE	ClearMem
    226  f038
    227  f038							;Setting some variables...
    228  f038
    229  f038				   SettingTrafficOffsets		; Time sensitive with player H position
    230  f038		       85 02		      STA	WSYNC	;We will set player position
    231  f03a		       20 da f7 	      JSR	DefaultOffsets
    232  f03d
    233  f03d		       ad b9 ff 	      LDA	TrafficSpeeds + 4 * 2	; Same as the line he is in.
    234  f040		       85 8e		      STA	Player0SpeedL
    235  f042
      0  f042					      SLEEP	11	;18
      1  f042				   .CYCLES    SET	11
      2  f042
      3  f042				  -	      IF	.CYCLES < 2
      4  f042				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f042				  -	      ERR
      6  f042					      ENDIF
      7  f042
      8  f042					      IF	.CYCLES & 1
      9  f042				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f042				  -	      nop	0
     11  f042					      ELSE
     12  f042		       24 00		      bit	VSYNC
     13  f044					      ENDIF
     14  f044				   .CYCLES    SET	.CYCLES - 3
     15  f044					      ENDIF
     16  f044
     17  f044					      REPEAT	.CYCLES / 2
     18  f044		       ea		      nop
     17  f044					      REPEND
     18  f045		       ea		      nop
     17  f045					      REPEND
     18  f046		       ea		      nop
     17  f046					      REPEND
     18  f047		       ea		      nop
     19  f048					      REPEND
    237  f048		       85 10		      STA	RESP0
    238  f04a
    239  f04a		       a2 00		      LDX	#0
    240  f04c		       ad 82 02 	      LDA	SWCHB	; Reading the switches and mapping to difficulty id
    241  f04f		       85 a6		      STA	StartSWCHB	; For game over
    242  f051		       29 c0		      AND	#%11000000
    243  f053		       f0 0b		      BEQ	CallConfigureDifficulty
    244  f055		       e8		      INX
    245  f056		       c9 80		      CMP	#%10000000
    246  f058		       f0 06		      BEQ	CallConfigureDifficulty
    247  f05a		       e8		      INX
    248  f05b		       c9 40		      CMP	#%01000000
    249  f05d		       f0 01		      BEQ	CallConfigureDifficulty
    250  f05f		       e8		      INX
    251  f060
    252  f060				   CallConfigureDifficulty
    253  f060		       e4 c4		      CPX	CurrentDifficulty	; Checks change on dificulty Switches
    254  f062		       d0 0c		      BNE	StoreCurrentDifficulty	; Do not change car
    255  f064		       a5 c0		      LDA	GameStatus
    256  f066		       d0 08		      BNE	StoreCurrentDifficulty	; Do not change car for a game running reset
    257  f068				   NextCar
    258  f068		       a4 a9		      LDY	CurrentCarId
    259  f06a		       c8		      INY
    260  f06b		       98		      TYA
    261  f06c		       29 03		      AND	#CURRENT_CAR_MASK	; Cycles 4 values...
    262  f06e		       85 a9		      STA	CurrentCarId
    263  f070				   StoreCurrentDifficulty
    264  f070		       86 c4		      STX	CurrentDifficulty
    265  f072		       20 af f7 	      JSR	ConfigureDifficulty
    266  f075
    267  f075				   ConfigureCarSprite
    268  f075		       a4 a9		      LDY	CurrentCarId
    269  f077		       b9 c5 ff 	      LDA	CarIdToSpriteAddressL,Y
    270  f07a		       85 a7		      STA	CarSpritePointerL
    271  f07c		       b9 c9 ff 	      LDA	CarIdToSpriteAddressH,Y
    272  f07f		       85 a8		      STA	CarSpritePointerH
    273  f081
    274  f081				   SetGameNotRunning
    275  f081		       a9 00		      LDA	#0
    276  f083		       85 c0		      STA	GameStatus
    277  f085
    278  f085				   ConfigureOneSecondTimer
    279  f085		       a9 3c		      LDA	#ONE_SECOND_FRAMES
    280  f087		       85 cf		      STA	OneSecondConter
    281  f089
    282  f089				   HPositioning
    283  f089		       85 02		      STA	WSYNC
    284  f08b
    285  f08b		       a9 30		      LDA	#%00110000	;2 Missile Size
    286  f08d		       85 04		      STA	NUSIZ0	;3
    287  f08f		       85 05		      STA	NUSIZ1	;3
    288  f091
    289  f091		       a9 35		      LDA	#PLAYER_0_X_START	;2
    290  f093		       85 b9		      STA	Player0X	;3
    291  f095
    292  f095		       a9 5a		      LDA	#INITIAL_COUNTDOWN_TIME	;2
    293  f097		       85 ba		      STA	CountdownTimer	;3
    294  f099
    295  f099		       a9 10		      LDA	#CHECKPOINT_INTERVAL
    296  f09b		       85 d7		      STA	NextCheckpoint
    297  f09d
    298  f09d		       a9 00		      LDA	#0	; Avoid missile reseting position 
      0  f09f					      SLEEP	11	;
      1  f09f				   .CYCLES    SET	11
      2  f09f
      3  f09f				  -	      IF	.CYCLES < 2
      4  f09f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f09f				  -	      ERR
      6  f09f					      ENDIF
      7  f09f
      8  f09f					      IF	.CYCLES & 1
      9  f09f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f09f				  -	      nop	0
     11  f09f					      ELSE
     12  f09f		       24 00		      bit	VSYNC
     13  f0a1					      ENDIF
     14  f0a1				   .CYCLES    SET	.CYCLES - 3
     15  f0a1					      ENDIF
     16  f0a1
     17  f0a1					      REPEAT	.CYCLES / 2
     18  f0a1		       ea		      nop
     17  f0a1					      REPEND
     18  f0a2		       ea		      nop
     17  f0a2					      REPEND
     18  f0a3		       ea		      nop
     17  f0a3					      REPEND
     18  f0a4		       ea		      nop
     19  f0a5					      REPEND
    300  f0a5		       85 11		      STA	RESP1
      0  f0a7					      SLEEP	2	;
      1  f0a7				   .CYCLES    SET	2
      2  f0a7
      3  f0a7				  -	      IF	.CYCLES < 2
      4  f0a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a7				  -	      ERR
      6  f0a7					      ENDIF
      7  f0a7
      8  f0a7				  -	      IF	.CYCLES & 1
      9  f0a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a7				  -	      nop	0
     11  f0a7				  -	      ELSE
     12  f0a7				  -	      bit	VSYNC
     13  f0a7				  -	      ENDIF
     14  f0a7				  -.CYCLES    SET	.CYCLES - 3
     15  f0a7					      ENDIF
     16  f0a7
     17  f0a7					      REPEAT	.CYCLES / 2
     18  f0a7		       ea		      nop
     19  f0a8					      REPEND
    302  f0a8		       85 14		      STA	RESBL
      0  f0aa					      SLEEP	2	;
      1  f0aa				   .CYCLES    SET	2
      2  f0aa
      3  f0aa				  -	      IF	.CYCLES < 2
      4  f0aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0aa				  -	      ERR
      6  f0aa					      ENDIF
      7  f0aa
      8  f0aa				  -	      IF	.CYCLES & 1
      9  f0aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0aa				  -	      nop	0
     11  f0aa				  -	      ELSE
     12  f0aa				  -	      bit	VSYNC
     13  f0aa				  -	      ENDIF
     14  f0aa				  -.CYCLES    SET	.CYCLES - 3
     15  f0aa					      ENDIF
     16  f0aa
     17  f0aa					      REPEAT	.CYCLES / 2
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    304  f0ab		       85 12		      STA	RESM0
      0  f0ad					      SLEEP	2
      1  f0ad				   .CYCLES    SET	2
      2  f0ad
      3  f0ad				  -	      IF	.CYCLES < 2
      4  f0ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ad				  -	      ERR
      6  f0ad					      ENDIF
      7  f0ad
      8  f0ad				  -	      IF	.CYCLES & 1
      9  f0ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ad				  -	      nop	0
     11  f0ad				  -	      ELSE
     12  f0ad				  -	      bit	VSYNC
     13  f0ad				  -	      ENDIF
     14  f0ad				  -.CYCLES    SET	.CYCLES - 3
     15  f0ad					      ENDIF
     16  f0ad
     17  f0ad					      REPEAT	.CYCLES / 2
     18  f0ad		       ea		      nop
     19  f0ae					      REPEND
    306  f0ae		       85 13		      STA	RESM1
    307  f0b0
    308  f0b0		       a9 f0		      LDA	#$F0
    309  f0b2		       85 24		      STA	HMBL
    310  f0b4		       85 22		      STA	HMM0
    311  f0b6		       85 23		      STA	HMM1
    312  f0b8		       85 02		      STA	WSYNC
    313  f0ba		       85 2a		      STA	HMOVE
    314  f0bc		       85 02		      STA	WSYNC	; Time is irrelevant before sync to TV, ROM space is not!
    315  f0be		       85 2b		      STA	HMCLR
    316  f0c0
    317  f0c0							;SLEEP 24
    318  f0c0							;STA HMCLR
    319  f0c0
    320  f0c0							;VSYNC time
    321  f0c0				   MainLoop
    322  f0c0		       a9 02		      LDA	#2
    323  f0c2		       85 00		      STA	VSYNC
    324  f0c4		       85 02		      STA	WSYNC
    325  f0c6
    326  f0c6				   CalculateTextSide		; Here because it is a waste of cycles not to put anything
    327  f0c6		       a9 01		      LDA	#%00000001
    328  f0c8		       24 ac		      BIT	TextFlickerMode
    329  f0ca		       f0 05		      BEQ	TextSideFrameZero
    330  f0cc		       25 8d		      AND	FrameCount1
    331  f0ce		       4c d3 f0 	      JMP	StoreTextSize
    332  f0d1				   TextSideFrameZero
    333  f0d1		       25 8c		      AND	FrameCount0
    334  f0d3				   StoreTextSize
    335  f0d3		       85 ab		      STA	TextSide
    336  f0d5
    337  f0d5		       85 02		      STA	WSYNC	;Apply Movement, must be done after a WSYNC
    338  f0d7		       85 2a		      STA	HMOVE	;2
    339  f0d9				   ConfigVBlankTimer
    340  f0d9		       a5 c5		      LDA	GameMode
    341  f0db		       c9 10		      CMP	#MAX_GAME_MODE
    342  f0dd		       f0 05		      BEQ	SetVblankTimerQrCode
    343  f0df		       a9 29		      LDA	#VBLANK_TIMER
    344  f0e1		       4c e6 f0 	      JMP	SetVblankTimer
    345  f0e4				   SetVblankTimerQrCode
    346  f0e4		       a9 1a		      LDA	#VBLANK_TIMER_QR_CODE
    347  f0e6				   SetVblankTimer
    348  f0e6		       85 02		      STA	WSYNC	;3
    349  f0e8		       8d 96 02 	      STA	TIM64T	;3	
    350  f0eb		       a9 00		      LDA	#0	;2
    351  f0ed		       85 00		      STA	VSYNC	;3	
    352  f0ef
    353  f0ef							;Read Fire Button before, will make it start the game for now.
    354  f0ef				   StartGame
    355  f0ef		       a5 0c		      LDA	INPT4	;3
    356  f0f1		       30 2e		      BMI	SkipGameStart	;2 ;not pressed the fire button in negative in bit 7
    357  f0f3		       a5 c0		      LDA	GameStatus	;3
    358  f0f5		       05 bc		      ORA	SwitchDebounceCounter	; Do not start during debounce
    359  f0f7		       d0 28		      BNE	SkipGameStart
    360  f0f9		       a5 c5		      LDA	GameMode
    361  f0fb		       c9 10		      CMP	#MAX_GAME_MODE
    362  f0fd		       d0 0b		      BNE	SetGameRunning
    363  f0ff		       a9 00		      LDA	#0
    364  f101		       85 c5		      STA	GameMode
    365  f103		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    366  f105		       85 bc		      STA	SwitchDebounceCounter
    367  f107		       4c 21 f1 	      JMP	SkipGameStart
    368  f10a				   SetGameRunning
    369  f10a		       e6 c0		      INC	GameStatus
    370  f10c		       a9 00		      LDA	#0	;
    371  f10e		       85 8c		      STA	FrameCount0
    372  f110		       85 8d		      STA	FrameCount1
    373  f112		       a9 0a		      LDA	#10
    374  f114		       85 19		      STA	AUDV0
    375  f116		       a9 c8		      LDA	#SCORE_FONT_COLOR_START
    376  f118		       85 d5		      STA	ScoreFontColor
    377  f11a		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    378  f11c		       85 d6		      STA	ScoreFontColorHoldChange
    379  f11e		       4c 9d f1 	      JMP	SkipIncFC1	; Make the worse case stable
    380  f121				   SkipGameStart
    381  f121
    382  f121				   RandomizeGame
    383  f121		       a5 c0		      LDA	GameStatus	;Could be merge with code block bellow
    384  f123		       d0 30		      BNE	EndRandomizeGame
    385  f125		       a5 c5		      LDA	GameMode	; Games 3 and for and not running
    386  f127		       29 02		      AND	#%00000010
    387  f129		       f0 27		      BEQ	DeterministicGame
    388  f12b		       a6 96		      LDX	TrafficOffset1 + 2
    389  f12d		       bd 00 fe 	      LDA	AesTable,X
    390  f130		       45 8c		      EOR	FrameCount0
    391  f132		       85 96		      STA	TrafficOffset1 + 2
    392  f134		       a6 9a		      LDX	TrafficOffset2 + 2
    393  f136		       bd 00 fe 	      LDA	AesTable,X
    394  f139		       45 8c		      EOR	FrameCount0
    395  f13b		       85 9a		      STA	TrafficOffset2 + 2
    396  f13d		       a6 9e		      LDX	TrafficOffset3 + 2
    397  f13f		       bd 00 fe 	      LDA	AesTable,X
    398  f142		       45 8c		      EOR	FrameCount0
    399  f144		       85 9e		      STA	TrafficOffset3 + 2
    400  f146		       a6 a2		      LDX	TrafficOffset4 + 2
    401  f148		       bd 00 fe 	      LDA	AesTable,X
    402  f14b		       45 8c		      EOR	FrameCount0
    403  f14d		       85 a2		      STA	TrafficOffset4 + 2
    404  f14f		       4c 55 f1 	      JMP	EndRandomizeGame
    405  f152
    406  f152				   DeterministicGame
    407  f152		       20 da f7 	      JSR	DefaultOffsets
    408  f155
    409  f155				   EndRandomizeGame
    410  f155
    411  f155				   ReadSwitches
    412  f155		       a6 bc		      LDX	SwitchDebounceCounter
    413  f157		       d0 3c		      BNE	DecrementSwitchDebounceCounter
    414  f159		       a9 01		      LDA	#%00000001
    415  f15b		       2c 82 02 	      BIT	SWCHB
    416  f15e		       d0 07		      BNE	SkipReset
    417  f160		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    418  f162		       85 bc		      STA	SwitchDebounceCounter
    419  f164		       4c 14 f0 	      JMP	Start
    420  f167				   SkipReset
    421  f167
    422  f167				   GameModeSelect
    423  f167		       a5 c0		      LDA	GameStatus	;We don't read game select while running and save precious cycles
    424  f169		       d0 27		      BNE	SkipGameSelect
    425  f16b		       20 af f7 	      JSR	ConfigureDifficulty	; Keeps randomizing dificulty for modes 8 to F, also resets it for other modes
    426  f16e				   ReadDpadParallax
    427  f16e		       ad 80 02 	      LDA	SWCHA
    428  f171		       29 f0		      AND	#%11110000
    429  f173		       c9 f0		      CMP	#%11110000	; 1 means it is not on that direction 
    430  f175		       f0 02		      BEQ	ContinueGameSelect	; We do not change parallax while gamepad is centered!
    431  f177		       85 88		      STA	ParallaxMode
    432  f179				   ContinueGameSelect
    433  f179		       a9 02		      LDA	#%00000010
    434  f17b		       2c 82 02 	      BIT	SWCHB
    435  f17e		       d0 12		      BNE	SkipGameSelect
    436  f180		       a6 c5		      LDX	GameMode
    437  f182		       e0 10		      CPX	#MAX_GAME_MODE
    438  f184		       f0 04		      BEQ	ResetGameMode
    439  f186		       e8		      INX
    440  f187		       4c 8c f1 	      JMP	StoreGameMode
    441  f18a				   ResetGameMode
    442  f18a		       a2 00		      LDX	#0
    443  f18c				   StoreGameMode
    444  f18c		       86 c5		      STX	GameMode
    445  f18e		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    446  f190		       85 bc		      STA	SwitchDebounceCounter
    447  f192				   SkipGameSelect
    448  f192		       4c 97 f1 	      JMP	EndReadSwitches
    449  f195				   DecrementSwitchDebounceCounter
    450  f195		       c6 bc		      DEC	SwitchDebounceCounter
    451  f197				   EndReadSwitches
    452  f197
    453  f197				   CountFrame
    454  f197		       e6 8c		      INC	FrameCount0	; 5
    455  f199		       d0 02		      BNE	SkipIncFC1	; 2 When it is zero again should increase the MSB
    456  f19b		       e6 8d		      INC	FrameCount1	; 5 
    457  f19d				   SkipIncFC1
    458  f19d
    459  f19d				   CallDrawQrCode
    460  f19d		       a5 c5		      LDA	GameMode
    461  f19f		       c9 10		      CMP	#MAX_GAME_MODE
    462  f1a1		       d0 03		      BNE	TestIsGameRunning
    463  f1a3		       4c 64 fc 	      JMP	DrawQrCode
    464  f1a6
    465  f1a6							;Does not update the game if not running
    466  f1a6				   TestIsGameRunning
    467  f1a6		       a5 c0		      LDA	GameStatus	;3
    468  f1a8		       d0 03		      BNE	ContinueWithGameLogic	;3 Cannot branch more than 128 bytes, so we have to use JMP
    469  f1aa		       4c b6 f3 	      JMP	SkipUpdateLogic
    470  f1ad				   ContinueWithGameLogic
    471  f1ad
    472  f1ad				   EverySecond		; 64 frames to be more precise
    473  f1ad		       a9 3f		      LDA	#%00111111
    474  f1af		       25 8c		      AND	FrameCount0
    475  f1b1		       d0 06		      BNE	SkipEverySecondAction
    476  f1b3		       c5 ba		      CMP	CountdownTimer
    477  f1b5		       f0 02		      BEQ	SkipEverySecondAction	; Stop at Zero
    478  f1b7		       c6 ba		      DEC	CountdownTimer
    479  f1b9				   SkipEverySecondAction
    480  f1b9
    481  f1b9				   ChangeTextFlickerMode
    482  f1b9		       a5 bc		      LDA	SwitchDebounceCounter
    483  f1bb		       d0 0d		      BNE	EndChangeTextFlickerMode
    484  f1bd		       ad 82 02 	      LDA	SWCHB
    485  f1c0		       29 02		      AND	#%00000010	;Game select
    486  f1c2		       d0 06		      BNE	EndChangeTextFlickerMode
    487  f1c4		       e6 ac		      INC	TextFlickerMode
    488  f1c6		       a9 1e		      LDA	#SWITCHES_DEBOUNCE_TIME
    489  f1c8		       85 bc		      STA	SwitchDebounceCounter
    490  f1ca				   EndChangeTextFlickerMode
    491  f1ca
    492  f1ca				   BreakOnTimeOver		; Uses LDX as the breaking speed
    493  f1ca		       a2 00		      LDX	#0
    494  f1cc		       a5 ba		      LDA	CountdownTimer
    495  f1ce		       d0 0b		      BNE	Break
    496  f1d0		       a4 a9		      LDY	CurrentCarId
    497  f1d2		       a5 8c		      LDA	FrameCount0
    498  f1d4		       39 d1 ff 	      AND	CarIdToTimeoverBreakInterval,Y
    499  f1d7		       d0 02		      BNE	Break
    500  f1d9		       a2 01		      LDX	#TIMEOVER_BREAK_SPEED
    501  f1db
    502  f1db				   Break
    503  f1db		       a9 20		      LDA	#%00100000	;Down in controller
    504  f1dd		       2c 80 02 	      BIT	SWCHA
    505  f1e0		       d0 0e		      BNE	BreakNonZero
    506  f1e2		       a5 0c		      LDA	INPT4	;3
    507  f1e4		       10 08		      BPL	BreakWhileAccelerating
    508  f1e6		       a4 ad		      LDY	Gear
    509  f1e8		       be dd ff 	      LDX	GearToBreakSpeedTable,Y	; Different break speeds depending on speed.
    510  f1eb		       4c f0 f1 	      JMP	BreakNonZero
    511  f1ee				   BreakWhileAccelerating		; Allow better control while breaking.
    512  f1ee		       a2 05		      LDX	(#BREAK_SPEED / 2)
    513  f1f0
    514  f1f0				   BreakNonZero
    515  f1f0		       e0 00		      CPX	#0
    516  f1f2		       f0 2b		      BEQ	SkipBreak
    517  f1f4		       86 b0		      STX	Tmp0
    518  f1f6
    519  f1f6				   DecreaseSpeed
    520  f1f6		       38		      SEC
    521  f1f7		       a5 8e		      LDA	Player0SpeedL
    522  f1f9		       e5 b0		      SBC	Tmp0
    523  f1fb		       85 8e		      STA	Player0SpeedL
    524  f1fd		       a5 8f		      LDA	Player0SpeedH
    525  f1ff		       e9 00		      SBC	#0
    526  f201		       85 8f		      STA	Player0SpeedH
    527  f203
    528  f203				   CheckMinSpeed
    529  f203		       30 0f		      BMI	ResetMinSpeed	; Overflow d7 is set
    530  f205		       c9 00		      CMP	#CAR_MIN_SPEED_H
    531  f207		       f0 02		      BEQ	CompareLBreakSpeed	; is the same as minimun, compare other byte.
    532  f209		       b0 11		      BCS	SkipAccelerateIfBreaking	; Greater than min, we are ok! 
    533  f20b
    534  f20b				   CompareLBreakSpeed
    535  f20b		       a5 8e		      LDA	Player0SpeedL
    536  f20d		       c9 00		      CMP	#CAR_MIN_SPEED_L
    537  f20f		       90 03		      BCC	ResetMinSpeed	; Less than memory
    538  f211		       4c 1c f2 	      JMP	SkipAccelerateIfBreaking	; We are greather than min speed in the low byte.
    539  f214
    540  f214				   ResetMinSpeed
    541  f214		       a9 00		      LDA	#CAR_MIN_SPEED_H
    542  f216		       85 8f		      STA	Player0SpeedH
    543  f218		       a9 00		      LDA	#CAR_MIN_SPEED_L
    544  f21a		       85 8e		      STA	Player0SpeedL
    545  f21c
    546  f21c				   SkipAccelerateIfBreaking
    547  f21c		       4c 61 f2 	      JMP	SkipAccelerate
    548  f21f				   SkipBreak
    549  f21f
    550  f21f				   Acelerates
    551  f21f		       a5 ba		      LDA	CountdownTimer
    552  f221		       f0 3e		      BEQ	SkipAccelerate	; cannot accelerate if timer is zero
    553  f223
    554  f223				   ContinueAccelerateTest
    555  f223		       a5 0c		      LDA	INPT4	;3
    556  f225		       10 07		      BPL	IncreaseCarSpeed	; Test button and then up, both accelerate.
    557  f227		       a9 10		      LDA	#%00010000	;UP in controller
    558  f229		       2c 80 02 	      BIT	SWCHA
    559  f22c		       d0 33		      BNE	SkipAccelerate
    560  f22e
    561  f22e				   IncreaseCarSpeed
    562  f22e		       a2 02		      LDX	#2
    563  f230		       a4 a9		      LDY	CurrentCarId
    564  f232				   IncreaseCarSpeedLoop
    565  f232							;Adds speed
    566  f232		       18		      CLC
    567  f233		       a5 aa		      LDA	AccelerateBuffer
    568  f235		       79 cd ff 	      ADC	CarIdToAccelerateSpeed,Y
    569  f238		       85 aa		      STA	AccelerateBuffer
    570  f23a		       90 06		      BCC	ContinueIncreaseSpeedLoop	; Not enought in the buffer to change speed
    571  f23c		       e6 8e		      INC	Player0SpeedL
    572  f23e		       d0 02		      BNE	ContinueIncreaseSpeedLoop	; When turns Zero again, increase MSB
    573  f240		       e6 8f		      INC	Player0SpeedH
    574  f242				   ContinueIncreaseSpeedLoop
    575  f242		       ca		      DEX
    576  f243		       d0 ed		      BNE	IncreaseCarSpeedLoop
    577  f245				   SkipIncreaseCarSpeed
    578  f245
    579  f245				   CheckIfAlreadyMaxSpeed
    580  f245		       a5 8f		      LDA	Player0SpeedH
    581  f247		       c9 02		      CMP	#CAR_MAX_SPEED_H
    582  f249		       90 16		      BCC	SkipAccelerate	; less than my max speed
    583  f24b		       d0 09		      BNE	ResetToMaxSpeed	; Not equal, so if I am less, and not equal, I am more!
    584  f24d							;High bit is max, compare the low
    585  f24d		       a4 a9		      LDY	CurrentCarId
    586  f24f		       a5 8e		      LDA	Player0SpeedL
    587  f251		       d9 d5 ff 	      CMP	CarIdToMaxSpeedL,Y
    588  f254		       90 0b		      BCC	SkipAccelerate	; High bit is max, but low bit is not
    589  f256							;BEQ SkipAccelerate ; Optimize best case, but not worse case
    590  f256
    591  f256				   ResetToMaxSpeed		; Speed is more, or is already max
    592  f256		       a9 02		      LDA	#CAR_MAX_SPEED_H
    593  f258		       85 8f		      STA	Player0SpeedH
    594  f25a		       a4 a9		      LDY	CurrentCarId
    595  f25c		       b9 d5 ff 	      LDA	CarIdToMaxSpeedL,Y
    596  f25f		       85 8e		      STA	Player0SpeedL
    597  f261				   SkipAccelerate
    598  f261
    599  f261				   InitUpdateOffsets
    600  f261		       a2 00		      LDX	#0	; Memory Offset 24 bit
    601  f263		       a0 00		      LDY	#0	; Line Speeds 16 bits
    602  f265		       a5 91		      LDA	TrafficOffset0 + 1	;
    603  f267		       85 b3		      STA	Tmp3	; Used for bcd score, to detect change on D4
    604  f269		       a5 c5		      LDA	GameMode
    605  f26b		       29 04		      AND	#%00000100	; GameModes with high delta
    606  f26d		       f0 02		      BEQ	UpdateOffsets
    607  f26f		       a0 0a		      LDY	#(TrafficSpeedsHighDelta - TrafficSpeeds)
    608  f271
    609  f271				   UpdateOffsets		; Car sped - traffic speed = how much to change offet (signed)
    610  f271		       38		      SEC
    611  f272		       a5 8e		      LDA	Player0SpeedL
    612  f274		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    613  f277		       85 b0		      STA	Tmp0
    614  f279		       c8		      INY
    615  f27a		       a5 8f		      LDA	Player0SpeedH
    616  f27c		       f9 b1 ff 	      SBC	TrafficSpeeds,Y
    617  f27f		       85 b1		      STA	Tmp1
    618  f281		       a9 00		      LDA	#0	; Hard to figure out, makes the 2 complement result work correctly, since we use this 16 bit signed result in a 24 bit operation
    619  f283		       e9 00		      SBC	#0
    620  f285		       85 b2		      STA	Tmp2
    621  f287
    622  f287				   AddsTheResult
    623  f287		       18		      CLC
    624  f288		       a5 b0		      LDA	Tmp0
    625  f28a		       75 90		      ADC	TrafficOffset0,X
    626  f28c		       95 90		      STA	TrafficOffset0,X
    627  f28e		       e8		      INX
    628  f28f		       a5 b1		      LDA	Tmp1
    629  f291		       75 90		      ADC	TrafficOffset0,X
    630  f293		       95 90		      STA	TrafficOffset0,X
    631  f295		       e8		      INX
    632  f296		       a5 b2		      LDA	Tmp2	; Carry
    633  f298		       75 90		      ADC	TrafficOffset0,X
    634  f29a		       95 90		      STA	TrafficOffset0,X
    635  f29c		       90 06		      BCC	CalculateOffsetCache
    636  f29e		       e0 02		      CPX	#2	;MSB offset 0
    637  f2a0		       d0 02		      BNE	CalculateOffsetCache
    638  f2a2		       e6 bb		      INC	Traffic0Msb
    639  f2a4
    640  f2a4				   CalculateOffsetCache
    641  f2a4		       e8		      INX
    642  f2a5		       38		      SEC
    643  f2a6		       69 00		      ADC	#0	;Increment by one
    644  f2a8		       95 90		      STA	TrafficOffset0,X	; cache of the other possible value for the MSB in the frame, make drawing faster.
    645  f2aa
    646  f2aa				   PrepareNextUpdateLoop
    647  f2aa		       c8		      INY
    648  f2ab		       e8		      INX
    649  f2ac		       e0 14		      CPX	#TRAFFIC_LINE_COUNT * 4	;
    650  f2ae		       d0 c1		      BNE	UpdateOffsets
    651  f2b0
    652  f2b0				   BcdScore		; 48
    653  f2b0		       a5 91		      LDA	TrafficOffset0 + 1	;3
    654  f2b2		       45 b3		      EOR	Tmp3	;3
    655  f2b4		       29 10		      AND	#%00010000	; 2 Change in D4 means change on screen first digit, inc BCD
    656  f2b6		       f0 1b		      BEQ	FinishBcdScore	;2
    657  f2b8
    658  f2b8				   ContinueBcdScore
    659  f2b8		       f8		      SED		;2
    660  f2b9		       18		      CLC		;2
    661  f2ba		       a5 b4		      LDA	ScoreBcd0	;3
    662  f2bc		       69 01		      ADC	#1	;2
    663  f2be		       85 b4		      STA	ScoreBcd0	;3
    664  f2c0		       a5 b5		      LDA	ScoreBcd1	;3
    665  f2c2		       69 00		      ADC	#0	;2
    666  f2c4		       85 b5		      STA	ScoreBcd1	;3
    667  f2c6		       a5 b6		      LDA	ScoreBcd2	;3
    668  f2c8		       69 00		      ADC	#0	;2
    669  f2ca		       85 b6		      STA	ScoreBcd2	;3
    670  f2cc		       a5 b7		      LDA	ScoreBcd3	;3
    671  f2ce		       69 00		      ADC	#0	;2
    672  f2d0		       85 b7		      STA	ScoreBcd3	;3
    673  f2d2		       d8		      CLD		;2
    674  f2d3				   FinishBcdScore
    675  f2d3
    676  f2d3							;Until store the movemnt, LDX contains the value to be stored.
    677  f2d3				   TestCollision		;
    678  f2d3							; see if player0 colides with the rest
    679  f2d3		       a5 00		      LDA	CXM0P
    680  f2d5		       05 01		      ORA	CXM1P
    681  f2d7		       05 01		      ORA	CXM1P
    682  f2d9		       05 02		      ORA	CXP0FB
    683  f2db		       05 07		      ORA	CXPPMM
    684  f2dd		       29 c0		      AND	#%11000000	; Accounting for random noise in the bus		
    685  f2df		       f0 3e		      BEQ	NoCollision	;skip if not hitting...
    686  f2e1		       a5 b8		      LDA	CollisionCounter	; If colision is alredy happening, ignore!
    687  f2e3		       d0 3a		      BNE	NoCollision
    688  f2e5		       a5 d5		      LDA	ScoreFontColor	; Ignore colisions during checkpoint (Green Score)
    689  f2e7		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    690  f2e9		       f0 34		      BEQ	NoCollision
    691  f2eb		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    692  f2ed		       f0 30		      BEQ	NoCollision
    693  f2ef		       a9 ff		      LDA	#COLLISION_FRAMES	;must be a hit! Change rand color bg
    694  f2f1		       85 b8		      STA	CollisionCounter	;and store as colision.
    695  f2f3				   CountBcdColision
    696  f2f3		       a5 d5		      LDA	ScoreFontColor	; Do not count colisions on game over.
    697  f2f5		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
    698  f2f7		       f0 1d		      BEQ	SkipSetColisionSpeedL
    699  f2f9		       f8		      SED		;2
    700  f2fa		       18		      CLC		;2
    701  f2fb		       a5 cb		      LDA	HitCountBcd0	;3
    702  f2fd		       69 01		      ADC	#1	;3
    703  f2ff		       85 cb		      STA	HitCountBcd0	;3
    704  f301		       a5 cc		      LDA	HitCountBcd1	;3
    705  f303		       69 00		      ADC	#0	;2
    706  f305		       85 cc		      STA	HitCountBcd1	;3
    707  f307		       d8		      CLD		;2
    708  f308				   EndCountBcdColision
    709  f308		       a5 8f		      LDA	Player0SpeedH
    710  f30a		       d0 06		      BNE	SetColisionSpeedL	; Never skips setting colision speed if high byte > 0
    711  f30c		       a9 10		      LDA	#COLLISION_SPEED_L
    712  f30e		       c5 8e		      CMP	Player0SpeedL
    713  f310		       b0 04		      BCS	SkipSetColisionSpeedL
    714  f312				   SetColisionSpeedL
    715  f312		       a9 10		      LDA	#COLLISION_SPEED_L	; Needs optimization!
    716  f314		       85 8e		      STA	Player0SpeedL
    717  f316				   SkipSetColisionSpeedL
    718  f316		       a9 00		      LDA	#0
    719  f318		       85 8f		      STA	Player0SpeedH
    720  f31a		       a2 40		      LDX	#$40	;Move car left 4 color clocks, to center the stretch (+4)	
    721  f31c		       4c 6a f3 	      JMP	StoreHMove	; We keep position consistent
    722  f31f				   NoCollision
    723  f31f
    724  f31f				   DecrementCollision
    725  f31f		       a4 b8		      LDY	CollisionCounter
    726  f321		       f0 07		      BEQ	FinishDecrementCollision
    727  f323		       a9 35		      LDA	#%00110101	; Make player bigger to show colision
    728  f325		       85 04		      STA	NUSIZ0
    729  f327		       88		      DEY
    730  f328		       84 b8		      STY	CollisionCounter	; We save some cycles in reset size.
    731  f32a				   FinishDecrementCollision
    732  f32a
    733  f32a				   ResetPlayerSize
    734  f32a		       d0 04		      BNE	FinishResetPlayerSize
    735  f32c		       a9 30		      LDA	#%00110000
    736  f32e		       85 04		      STA	NUSIZ0	;
    737  f330				   FinishResetPlayerSize
    738  f330
    739  f330				   ResetPlayerPosition		;For 1 frame, he will not colide, but will have the origina size
    740  f330		       c0 01		      CPY	#1	; Last frame before reset
    741  f332		       d0 05		      BNE	SkipResetPlayerPosition
    742  f334		       a2 c0		      LDX	#$C0	;Move car left 4 color clocks, to center the stretch (-4)
    743  f336		       4c 6a f3 	      JMP	StoreHMove
    744  f339				   SkipResetPlayerPosition
    745  f339
    746  f339				   MakeDragsterTurnSlow 		; Only car diff that does not use a table.
    747  f339		       a5 a9		      LDA	CurrentCarId
    748  f33b		       c9 03		      CMP	#CAR_ID_DRAGSTER
    749  f33d		       d0 08		      BNE	PrepareReadXAxis
    750  f33f		       a2 00		      LDX	#0
    751  f341		       a5 8c		      LDA	FrameCount0
    752  f343		       29 01		      AND	#DRAGSTER_TURN_MASK
    753  f345		       f0 23		      BEQ	StoreHMove	; Ignore movement on some frames
    754  f347
    755  f347							; for left and right, we're gonna 
    756  f347							; set the horizontal speed, and then do
    757  f347							; a single HMOVE.  We'll use X to hold the
    758  f347							; horizontal speed, then store it in the 
    759  f347							; appropriate register
    760  f347				   PrepareReadXAxis
    761  f347		       a2 00		      LDX	#0
    762  f349		       a4 b9		      LDY	Player0X
    763  f34b				   BeginReadLeft
    764  f34b		       f0 0e		      BEQ	SkipMoveLeft	; We do not move after maximum
    765  f34d		       a9 40		      LDA	#%01000000	;Left
    766  f34f		       2c 80 02 	      BIT	SWCHA
    767  f352		       d0 07		      BNE	SkipMoveLeft
    768  f354		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
    769  f356		       c6 b9		      DEC	Player0X
    770  f358		       4c 6a f3 	      JMP	StoreHMove	; Cannot move left and right...
    771  f35b				   SkipMoveLeft
    772  f35b				   BeginReadRight
    773  f35b		       c0 36		      CPY	#PLAYER_0_MAX_X
    774  f35d		       f0 0b		      BEQ	SkipMoveRight	; At max already
    775  f35f		       a9 80		      LDA	#%10000000	;Right
    776  f361		       2c 80 02 	      BIT	SWCHA
    777  f364		       d0 04		      BNE	SkipMoveRight
    778  f366		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    779  f368		       e6 b9		      INC	Player0X
    780  f36a				   SkipMoveRight
    781  f36a				   StoreHMove
    782  f36a		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    783  f36c		       85 2c		      STA	CXCLR	;reset the collision detection for next frame.
    784  f36e
    785  f36e				   DividePlayerSpeedBy4
    786  f36e		       a5 8f		      LDA	Player0SpeedH
    787  f370		       0a		      ASL
    788  f371		       0a		      ASL
    789  f372		       0a		      ASL
    790  f373		       0a		      ASL
    791  f374		       0a		      ASL
    792  f375		       0a		      ASL
    793  f376		       85 b1		      STA	Tmp1
    794  f378		       a5 8e		      LDA	Player0SpeedL
    795  f37a		       4a		      LSR
    796  f37b		       4a		      LSR
    797  f37c		       29 3f		      AND	#%00111111
    798  f37e		       05 b1		      ORA	Tmp1
    799  f380		       85 b0		      STA	Tmp0	; Division Result
    800  f382
    801  f382				   CalculateParallax1Offset		; 7/8 speed
    802  f382		       38		      SEC
    803  f383		       a5 8e		      LDA	Player0SpeedL
    804  f385		       e5 b0		      SBC	Tmp0
    805  f387		       85 b2		      STA	Tmp2
    806  f389		       a5 8f		      LDA	Player0SpeedH
    807  f38b		       e9 00		      SBC	#0
    808  f38d		       85 b3		      STA	Tmp3
    809  f38f
    810  f38f		       18		      CLC
    811  f390		       a5 c6		      LDA	ParallaxOffset1
    812  f392		       65 b2		      ADC	Tmp2
    813  f394		       85 c6		      STA	ParallaxOffset1
    814  f396		       a5 c7		      LDA	ParallaxOffset1 + 1
    815  f398		       65 b3		      ADC	Tmp3
    816  f39a		       85 c7		      STA	ParallaxOffset1 + 1
    817  f39c
    818  f39c				   CalculateParallax2Offset		; 6/8 speed
    819  f39c		       38		      SEC
    820  f39d		       a5 b2		      LDA	Tmp2
    821  f39f		       e5 b0		      SBC	Tmp0
    822  f3a1		       85 b2		      STA	Tmp2
    823  f3a3		       a5 b3		      LDA	Tmp3
    824  f3a5		       e9 00		      SBC	#0
    825  f3a7		       85 b3		      STA	Tmp3
    826  f3a9
    827  f3a9		       18		      CLC
    828  f3aa		       a5 c8		      LDA	ParallaxOffset2
    829  f3ac		       65 b2		      ADC	Tmp2
    830  f3ae		       85 c8		      STA	ParallaxOffset2
    831  f3b0		       a5 c9		      LDA	ParallaxOffset2 + 1
    832  f3b2		       65 b3		      ADC	Tmp3
    833  f3b4		       85 c9		      STA	ParallaxOffset2 + 1
    834  f3b6
    835  f3b6				   SkipUpdateLogic		; Continue here if not paused
    836  f3b6
    837  f3b6				   CalculateGear
    838  f3b6		       a5 8e		      LDA	Player0SpeedL	;3
    839  f3b8		       29 80		      AND	#%10000000	;2
    840  f3ba		       05 8f		      ORA	Player0SpeedH	;3
    841  f3bc		       18		      CLC		;2
    842  f3bd		       2a		      ROL		;2
    843  f3be		       69 00		      ADC	#0	; 2 Places the possible carry produced by ROL
    844  f3c0		       85 ad		      STA	Gear
    845  f3c2
    846  f3c2				   ProcessBorder		;Can be optimized (probably)
    847  f3c2		       a0 07		      LDY	#PARALLAX_SIZE - 1	; Used by all SBRs
    848  f3c4		       a5 88		      LDA	ParallaxMode
    849  f3c6		       c9 70		      CMP	#%01110000
    850  f3c8		       f0 1a		      BEQ	HorizontalParallaxMode
    851  f3ca		       c9 d0		      CMP	#%11010000
    852  f3cc		       f0 0a		      BEQ	VerticalParallaxMode
    853  f3ce		       c9 b0		      CMP	#%10110000
    854  f3d0		       f0 0c		      BEQ	TachometerMode
    855  f3d2
    856  f3d2				   DefaultBorderMode
    857  f3d2		       20 59 f8 	      JSR	DefaultBorderLoop
    858  f3d5		       4c e7 f3 	      JMP	EndProcessingBorder
    859  f3d8				   VerticalParallaxMode
    860  f3d8		       20 c3 f8 	      JSR	VerticalParallaxLoop
    861  f3db		       4c e7 f3 	      JMP	EndProcessingBorder
    862  f3de				   TachometerMode
    863  f3de		       20 74 f8 	      JSR	PrepareTachometerBorderLoop
    864  f3e1		       4c e7 f3 	      JMP	EndProcessingBorder
    865  f3e4				   HorizontalParallaxMode
    866  f3e4		       20 0b f8 	      JSR	HorizontalParallaxLoop
    867  f3e7
    868  f3e7				   EndProcessingBorder
    869  f3e7
    870  f3e7				   ProcessScoreFontColor
    871  f3e7		       a6 d6		      LDX	ScoreFontColorHoldChange
    872  f3e9		       f0 06		      BEQ	ResetScoreFontColor
    873  f3eb		       ca		      DEX
    874  f3ec		       86 d6		      STX	ScoreFontColorHoldChange
    875  f3ee		       4c f5 f3 	      JMP	SkipScoreFontColor
    876  f3f1				   ResetScoreFontColor
    877  f3f1		       a9 f9		      LDA	#SCORE_FONT_COLOR
    878  f3f3		       85 d5		      STA	ScoreFontColor
    879  f3f5				   SkipScoreFontColor
    880  f3f5
    881  f3f5				   IsGameOver
    882  f3f5		       a5 ba		      LDA	CountdownTimer
    883  f3f7		       05 8e		      ORA	Player0SpeedL
    884  f3f9		       05 8f		      ORA	Player0SpeedH
    885  f3fb		       d0 0b		      BNE	IsCheckpoint
    886  f3fd		       a9 01		      LDA	#1
    887  f3ff		       85 d6		      STA	ScoreFontColorHoldChange
    888  f401		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER
    889  f403		       85 d5		      STA	ScoreFontColor
    890  f405		       4c 49 f4 	      JMP	SkipIsTimeOver
    891  f408
    892  f408				   IsCheckpoint
    893  f408		       a5 d7		      LDA	NextCheckpoint
    894  f40a		       c5 92		      CMP	TrafficOffset0 + 2
    895  f40c		       d0 2f		      BNE	SkipIsCheckpoint
    896  f40e		       18		      CLC
    897  f40f		       69 10		      ADC	#CHECKPOINT_INTERVAL
    898  f411		       85 d7		      STA	NextCheckpoint
    899  f413		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
    900  f415		       85 d5		      STA	ScoreFontColor
    901  f417		       a9 ff		      LDA	#SCORE_FONT_HOLD_CHANGE
    902  f419		       85 d6		      STA	ScoreFontColorHoldChange
    903  f41b				   AddCheckpointBcd
    904  f41b		       f8		      SED		;2
    905  f41c		       18		      CLC		;2
    906  f41d		       a5 a4		      LDA	CheckpointBcd0	;3
    907  f41f		       69 01		      ADC	#1	;3
    908  f421		       85 a4		      STA	CheckpointBcd0	;3
    909  f423		       a5 a5		      LDA	CheckpointBcd1	;3
    910  f425		       69 00		      ADC	#0	;2
    911  f427		       85 a5		      STA	CheckpointBcd1	;3
    912  f429		       d8		      CLD		;2
    913  f42a				   EndCheckpointBcd
    914  f42a		       a5 ba		      LDA	CountdownTimer
    915  f42c		       18		      CLC
    916  f42d		       65 c2		      ADC	CheckpointTime
    917  f42f		       85 ba		      STA	CountdownTimer
    918  f431		       90 04		      BCC	JumpSkipTimeOver
    919  f433		       a9 ff		      LDA	#$FF
    920  f435		       85 ba		      STA	CountdownTimer	; Does not overflow!
    921  f437				   JumpSkipTimeOver
    922  f437		       20 a0 f7 	      JSR	NextDifficulty	; Increments to the next dificulty (Will depend on game mode in the future)
    923  f43a		       4c 49 f4 	      JMP	SkipIsTimeOver	; Checkpoints will add time, so no time over routine, should also override time over.
    924  f43d				   SkipIsCheckpoint
    925  f43d
    926  f43d				   IsTimeOver
    927  f43d		       a5 ba		      LDA	CountdownTimer
    928  f43f		       d0 08		      BNE	SkipIsTimeOver
    929  f441		       a9 01		      LDA	#1	; Red while 0, so just sets for the next frame, might still pass a checkpoint by inertia
    930  f443		       85 d6		      STA	ScoreFontColorHoldChange
    931  f445		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
    932  f447		       85 d5		      STA	ScoreFontColor
    933  f449				   SkipIsTimeOver
    934  f449
    935  f449				   PrintEasterEggCondition
    936  f449		       a5 8d		      LDA	FrameCount1
    937  f44b		       29 38		      AND	#%00111000
    938  f44d		       05 c0		      ORA	GameStatus
    939  f44f		       c9 38		      CMP	#%00111000
    940  f451		       d0 06		      BNE	ChooseTextSide
    941  f453		       20 17 f9 	      JSR	PrintEasterEgg
    942  f456		       4c 48 f5 	      JMP	RightScoreWriteEnd
    943  f459
    944  f459							;Could be done during on vblank to save this comparisson time (before draw score), 
    945  f459							;but I am saving vblank cycles for now, in case of 2 players.
    946  f459				   ChooseTextSide		; 
    947  f459		       a5 ab		      LDA	TextSide	;3
    948  f45b		       d0 03		      BNE	LeftScoreWrite	; Half of the screen with the correct colors.
    949  f45d		       4c de f4 	      JMP	RightScoreWrite
    950  f460
    951  f460				   LeftScoreWrite
    952  f460		       a5 d5		      LDA	ScoreFontColor
    953  f462		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD
    954  f464		       f0 4e		      BEQ	PrintCheckpoint
    955  f466		       c9 c8		      CMP	#SCORE_FONT_COLOR_START
    956  f468		       f0 52		      BEQ	PrintStartGame
    957  f46a		       a5 c0		      LDA	GameStatus
    958  f46c		       f0 56		      BEQ	PrintHellwayLeft
    959  f46e				   WriteDistance		;Not optimized yet, ugly code.
    960  f46e				   Digit0Distance
    961  f46e		       a5 91		      LDA	TrafficOffset0 + 1	;3
    962  f470		       4a		      LSR		; 2
    963  f471		       4a		      LSR		; 2
    964  f472		       4a		      LSR		; 2
    965  f473		       4a		      LSR		; 2
    966  f474		       aa		      TAX		; 2
    967  f475		       bd be fd 	      LDA	FontLookup,X	;4
    968  f478		       85 d3		      STA	ScoreD3	;3
    969  f47a
    970  f47a				   Digit1Distance
    971  f47a		       a5 92		      LDA	TrafficOffset0 + 2	;3
    972  f47c		       29 0f		      AND	#%00001111	;2
    973  f47e		       aa		      TAX		; 2
    974  f47f		       bd be fd 	      LDA	FontLookup,X	;4 
    975  f482		       85 d2		      STA	ScoreD2	;3
    976  f484
    977  f484				   Digit2Distance
    978  f484		       a5 92		      LDA	TrafficOffset0 + 2	;3
    979  f486		       4a		      LSR		; 2
    980  f487		       4a		      LSR		; 2
    981  f488		       4a		      LSR		; 2
    982  f489		       4a		      LSR		; 2
    983  f48a		       aa		      TAX		; 2
    984  f48b		       bd be fd 	      LDA	FontLookup,X	;4
    985  f48e		       85 d1		      STA	ScoreD1	;3
    986  f490
    987  f490				   Digit3Distance
    988  f490		       a5 bb		      LDA	Traffic0Msb	;3
    989  f492		       29 0f		      AND	#%00001111	;2
    990  f494		       aa		      TAX		; 2
    991  f495		       bd be fd 	      LDA	FontLookup,X	;4 
    992  f498		       85 d0		      STA	ScoreD0	;3
    993  f49a
    994  f49a				   DistanceOverflowDigit		; If overflow, the pipe becomes the last digit
    995  f49a		       a5 bb		      LDA	Traffic0Msb
    996  f49c		       29 f0		      AND	#%11110000	;2
    997  f49e		       d0 07		      BNE	DrawDistanceExtraDigit
    998  f4a0		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
    999  f4a2		       85 d4		      STA	ScoreD4	;3
   1000  f4a4		       4c b1 f4 	      JMP	EndDrawDistance
   1001  f4a7				   DrawDistanceExtraDigit
   1002  f4a7		       4a		      LSR		; 2
   1003  f4a8		       4a		      LSR		; 2
   1004  f4a9		       4a		      LSR		; 2
   1005  f4aa		       4a		      LSR		; 2
   1006  f4ab		       aa		      TAX		; 2
   1007  f4ac		       bd be fd 	      LDA	FontLookup,X	;4
   1008  f4af		       85 d4		      STA	ScoreD4	;3
   1009  f4b1
   1010  f4b1				   EndDrawDistance
   1011  f4b1		       4c 48 f5 	      JMP	RightScoreWriteEnd	;3
   1012  f4b4
   1013  f4b4				   PrintCheckpoint
   1014  f4b4		       a2 00		      LDX	#<CheckpointText
   1015  f4b6		       20 ed f7 	      JSR	PrintStaticText
   1016  f4b9		       4c 48 f5 	      JMP	RightScoreWriteEnd	;3
   1017  f4bc				   PrintStartGame
   1018  f4bc		       a2 23		      LDX	#<GoText
   1019  f4be		       20 ed f7 	      JSR	PrintStaticText
   1020  f4c1		       4c 48 f5 	      JMP	RightScoreWriteEnd	;3
   1021  f4c4
   1022  f4c4				   PrintHellwayLeft
   1023  f4c4		       a5 8d		      LDA	FrameCount1
   1024  f4c6		       29 01		      AND	#1
   1025  f4c8		       d0 05		      BNE	PrintCreditsLeft
   1026  f4ca		       a2 05		      LDX	#<HellwayLeftText
   1027  f4cc		       4c d1 f4 	      JMP	PrintGameMode
   1028  f4cf				   PrintCreditsLeft
   1029  f4cf		       a2 0f		      LDX	#<OpbText
   1030  f4d1
   1031  f4d1				   PrintGameMode
   1032  f4d1		       20 ed f7 	      JSR	PrintStaticText
   1033  f4d4		       a6 c5		      LDX	GameMode
   1034  f4d6		       bd be fd 	      LDA	FontLookup,X	;4 
   1035  f4d9		       85 d0		      STA	ScoreD0	;3
   1036  f4db		       4c 48 f5 	      JMP	RightScoreWriteEnd	;3
   1037  f4de
   1038  f4de				   RightScoreWrite
   1039  f4de		       a5 c0		      LDA	GameStatus
   1040  f4e0		       f0 45		      BEQ	PrintHellwayRight
   1041  f4e2		       a5 d5		      LDA	ScoreFontColor
   1042  f4e4		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1043  f4e6		       f0 52		      BEQ	PrintGameOver
   1044  f4e8				   Digit0Timer
   1045  f4e8		       a5 ba		      LDA	CountdownTimer	;3
   1046  f4ea		       29 0f		      AND	#%00001111	;2
   1047  f4ec		       aa		      TAX		; 2
   1048  f4ed		       bd be fd 	      LDA	FontLookup,X	;4 
   1049  f4f0		       85 d1		      STA	ScoreD1	;3
   1050  f4f2
   1051  f4f2				   Digit1Timer
   1052  f4f2		       a5 ba		      LDA	CountdownTimer	;3
   1053  f4f4		       4a		      LSR		; 2
   1054  f4f5		       4a		      LSR		; 2
   1055  f4f6		       4a		      LSR		; 2
   1056  f4f7		       4a		      LSR		; 2
   1057  f4f8		       aa		      TAX		; 2
   1058  f4f9		       bd be fd 	      LDA	FontLookup,X	;4
   1059  f4fc		       85 d0		      STA	ScoreD0	;3
   1060  f4fe
   1061  f4fe		       a9 a4		      LDA	#<Pipe + #FONT_OFFSET	;3
   1062  f500		       85 d2		      STA	ScoreD2	;3
   1063  f502
   1064  f502				   Digit0Speed
   1065  f502		       a5 8e		      LDA	Player0SpeedL
   1066  f504		       29 3c		      AND	#%00111100	;2 Discard the last bits
   1067  f506		       4a		      LSR		; 2
   1068  f507		       4a		      LSR		; 2
   1069  f508		       aa		      TAX		; 2
   1070  f509		       bd be fd 	      LDA	FontLookup,X	;4
   1071  f50c		       85 d4		      STA	ScoreD4	;3
   1072  f50e
   1073  f50e				   Digit1Speed
   1074  f50e		       a5 8e		      LDA	Player0SpeedL
   1075  f510		       29 c0		      AND	#%11000000	;2 Discard the last bits
   1076  f512		       18		      CLC
   1077  f513		       2a		      ROL		;First goes into carry
   1078  f514		       2a		      ROL
   1079  f515		       2a		      ROL
   1080  f516		       85 b0		      STA	Tmp0
   1081  f518		       a5 8f		      LDA	Player0SpeedH
   1082  f51a		       0a		      ASL
   1083  f51b		       0a		      ASL
   1084  f51c		       05 b0		      ORA	Tmp0
   1085  f51e		       aa		      TAX		; 2
   1086  f51f		       bd be fd 	      LDA	FontLookup,X	;4
   1087  f522		       85 d3		      STA	ScoreD3	;3
   1088  f524		       4c 48 f5 	      JMP	RightScoreWriteEnd
   1089  f527
   1090  f527				   PrintHellwayRight
   1091  f527		       a5 8d		      LDA	FrameCount1
   1092  f529		       29 01		      AND	#1
   1093  f52b		       d0 05		      BNE	PrintCreditsRight
   1094  f52d		       a2 0a		      LDX	#<HellwayRightText
   1095  f52f		       4c 34 f5 	      JMP	PrintRightIntro
   1096  f532				   PrintCreditsRight
   1097  f532		       a2 14		      LDX	#<YearText
   1098  f534				   PrintRightIntro
   1099  f534		       20 ed f7 	      JSR	PrintStaticText
   1100  f537		       4c 48 f5 	      JMP	RightScoreWriteEnd
   1101  f53a				   PrintGameOver
   1102  f53a		       a5 8c		      LDA	FrameCount0
   1103  f53c		       30 05		      BMI	PrintOverText
   1104  f53e		       a2 19		      LDX	#<GameText
   1105  f540		       4c 45 f5 	      JMP	StoreGameOverText
   1106  f543				   PrintOverText
   1107  f543		       a2 1e		      LDX	#<OverText
   1108  f545				   StoreGameOverText
   1109  f545		       20 ed f7 	      JSR	PrintStaticText
   1110  f548				   RightScoreWriteEnd
   1111  f548
   1112  f548
   1113  f548				   ScoreBackgroundColor
   1114  f548		       a2 00		      LDX	#0
   1115  f54a		       ad 82 02 	      LDA	SWCHB
   1116  f54d		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   1117  f54f		       f0 04		      BEQ	BlackAndWhiteScoreBg
   1118  f551		       a9 a0		      LDA	#SCORE_BACKGROUND_COLOR
   1119  f553		       a2 03		      LDX	#BACKGROUND_COLOR
   1120  f555				   BlackAndWhiteScoreBg
   1121  f555		       85 b2		      STA	Tmp2	; Score Background
   1122  f557		       86 b3		      STX	Tmp3	; Traffic Background
   1123  f559
   1124  f559				   ConfigurePFForScore
   1125  f559							;LDA #SCORE_BACKGROUND_COLOR; Done above
   1126  f559		       85 09		      STA	COLUBK
   1127  f55b		       20 62 f7 	      JSR	ClearAll
   1128  f55e		       a9 02		      LDA	#%00000010	; Score mode
   1129  f560		       85 0a		      STA	CTRLPF
   1130  f562		       a5 ab		      LDA	TextSide	;3
   1131  f564		       d0 0f		      BNE	RightScoreOn	; Half of the screen with the correct colors.
   1132  f566				   LeftScoreOn
   1133  f566		       a5 d5		      LDA	ScoreFontColor
   1134  f568		       85 07		      STA	COLUP1
   1135  f56a		       a5 b2		      LDA	Tmp2
   1136  f56c		       85 06		      STA	COLUP0
   1137  f56e		       a9 01		      LDA	#1	;Jumps faster in the draw loop
   1138  f570		       85 b1		      STA	Tmp1
   1139  f572		       4c 81 f5 	      JMP	CallWaitForVblankEnd
   1140  f575				   RightScoreOn
   1141  f575		       a5 d5		      LDA	ScoreFontColor
   1142  f577		       85 06		      STA	COLUP0
   1143  f579		       a5 b2		      LDA	Tmp2
   1144  f57b		       85 07		      STA	COLUP1
   1145  f57d		       a9 00		      LDA	#0	;Jumps faster in the draw loop
   1146  f57f		       85 b1		      STA	Tmp1
   1147  f581
   1148  f581							; After here we are going to update the screen, No more heavy code
   1149  f581				   CallWaitForVblankEnd
   1150  f581		       20 87 fb 	      JSR	WaitForVblankEnd
   1151  f584
   1152  f584				   DrawScoreHud
   1153  f584		       20 89 f9 	      JSR	PrintScore
   1154  f587
   1155  f587		       85 02		      STA	WSYNC
   1156  f589
   1157  f589		       a5 0c		      LDA	INPT4	;3
   1158  f58b		       10 10		      BPL	WaitAnotherScoreLine	; Draw traffic while button is pressed.
   1159  f58d		       a5 d5		      LDA	ScoreFontColor
   1160  f58f		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER
   1161  f591		       d0 0a		      BNE	WaitAnotherScoreLine
   1162  f593		       a5 ab		      LDA	TextSide	;3
   1163  f595		       d0 03		      BNE	LeftScoreOnGameOver
   1164  f597		       4c 14 fb 	      JMP	DrawGameOverScreenRight
   1165  f59a				   LeftScoreOnGameOver
   1166  f59a		       4c 46 fa 	      JMP	DrawGameOverScreenLeft
   1167  f59d
   1168  f59d				   WaitAnotherScoreLine
   1169  f59d		       85 02		      STA	WSYNC
   1170  f59f
   1171  f59f				   PrepareForTraffic
   1172  f59f		       20 74 f7 	      JSR	ClearPF	; 32
   1173  f5a2
   1174  f5a2		       85 02		      STA	WSYNC
   1175  f5a4		       85 02		      STA	WSYNC
   1176  f5a6
   1177  f5a6		       a9 31		      LDA	#%00110001	; 2 Score mode
   1178  f5a8		       85 0a		      STA	CTRLPF	;3
   1179  f5aa
   1180  f5aa		       a5 c3		      LDA	TrafficColor	;3
   1181  f5ac		       85 08		      STA	COLUPF	;3
   1182  f5ae
   1183  f5ae		       a9 96		      LDA	#PLAYER1_COLOR	;2
   1184  f5b0		       85 07		      STA	COLUP1	;3
   1185  f5b2
   1186  f5b2		       a5 d5		      LDA	ScoreFontColor	;3
   1187  f5b4		       85 06		      STA	COLUP0	;3
   1188  f5b6
   1189  f5b6		       a0 42		      LDY	#GAMEPLAY_AREA	;2; (Score)
   1190  f5b8
   1191  f5b8		       20 74 f7 	      JSR	ClearPF	; 32 Useless, but get to wait 32 cycles
   1192  f5bb
      0  f5bb					      SLEEP	14
      1  f5bb				   .CYCLES    SET	14
      2  f5bb
      3  f5bb				  -	      IF	.CYCLES < 2
      4  f5bb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5bb				  -	      ERR
      6  f5bb					      ENDIF
      7  f5bb
      8  f5bb				  -	      IF	.CYCLES & 1
      9  f5bb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5bb				  -	      nop	0
     11  f5bb				  -	      ELSE
     12  f5bb				  -	      bit	VSYNC
     13  f5bb				  -	      ENDIF
     14  f5bb				  -.CYCLES    SET	.CYCLES - 3
     15  f5bb					      ENDIF
     16  f5bb
     17  f5bb					      REPEAT	.CYCLES / 2
     18  f5bb		       ea		      nop
     17  f5bb					      REPEND
     18  f5bc		       ea		      nop
     17  f5bc					      REPEND
     18  f5bd		       ea		      nop
     17  f5bd					      REPEND
     18  f5be		       ea		      nop
     17  f5be					      REPEND
     18  f5bf		       ea		      nop
     17  f5bf					      REPEND
     18  f5c0		       ea		      nop
     17  f5c0					      REPEND
     18  f5c1		       ea		      nop
     19  f5c2					      REPEND
   1194  f5c2
   1195  f5c2		       a5 b3		      LDA	Tmp3	;3
   1196  f5c4		       85 09		      STA	COLUBK	;3
   1197  f5c6		       4c cb f5 	      JMP	DrawCache	;3 Skips the first WSYNC, so the last background line can be draw to the end.
   1198  f5c9							;The first loop never drans a car, so it is fine this jump uses 3 cycles of the next line.
   1199  f5c9
   1200  f5c9							;main scanline loop...
   1201  f5c9				   ScanLoop
   1202  f5c9		       85 02		      STA	WSYNC	;?? from the end of the scan loop, sync the final line
   1203  f5cb
   1204  f5cb							;Start of next line!			
   1205  f5cb				   DrawCache		;63 Is the last line going to the top of the next frame?
   1206  f5cb		       a5 81		      LDA	PF0Cache	;3
   1207  f5cd		       85 0d		      STA	PF0	;3
   1208  f5cf
   1209  f5cf		       a5 82		      LDA	PF1Cache	;3
   1210  f5d1		       85 0e		      STA	PF1	;3
   1211  f5d3
   1212  f5d3		       c0 0e		      CPY	#CAR_START_LINE	;2 ;Saves memory and still fast
   1213  f5d5		       b0 04		      BCS	SkipDrawCar	;2
   1214  f5d7		       b1 a7		      LDA	(CarSpritePointerL),Y	;5 ;Very fast, in the expense of rom space
   1215  f5d9		       85 1b		      STA	GRP0	;3   ;put it as graphics now
   1216  f5db				   SkipDrawCar
   1217  f5db
   1218  f5db		       a5 84		      LDA	GRP1Cache	;3
   1219  f5dd		       85 1c		      STA	GRP1	;3
   1220  f5df
   1221  f5df		       a5 85		      LDA	ENABLCache	;3
   1222  f5e1		       85 1f		      STA	ENABL	;3
   1223  f5e3
   1224  f5e3		       a5 86		      LDA	ENAM0Cache	;3
   1225  f5e5		       85 1d		      STA	ENAM0	;3
   1226  f5e7
   1227  f5e7		       a5 87		      LDA	ENAM1Cache	;3
   1228  f5e9		       85 1e		      STA	ENAM1	;3
   1229  f5eb
   1230  f5eb		       a9 00		      LDA	#0	;2
   1231  f5ed							;STA PF1Cache ;3
   1232  f5ed		       85 84		      STA	GRP1Cache	;3
   1233  f5ef		       85 85		      STA	ENABLCache	;3
   1234  f5f1		       85 86		      STA	ENAM0Cache	;3
   1235  f5f3		       85 87		      STA	ENAM1Cache	; 3
   1236  f5f5
   1237  f5f5							;BEQ DrawTraffic3
   1238  f5f5				   DrawTraffic1 		; 33
   1239  f5f5		       98		      TYA		; 2
   1240  f5f6		       18		      CLC		; 2 
   1241  f5f7		       65 95		      ADC	TrafficOffset1 + 1	;3
   1242  f5f9		       29 f8		      AND	#TRAFFIC_1_MASK	;2 ;#%11111000
   1243  f5fb		       b0 05		      BCS	EorOffsetWithCarry	; 2(worse not to jump), 4 if branch
   1244  f5fd		       45 96		      EOR	TrafficOffset1 + 2	; 3
   1245  f5ff		       4c 04 f6 	      JMP	AfterEorOffsetWithCarry	; 3
   1246  f602				   EorOffsetWithCarry
   1247  f602		       45 97		      EOR	TrafficOffset1 + 3	; 3
   1248  f604				   AfterEorOffsetWithCarry		;17
   1249  f604		       aa		      TAX		;2
   1250  f605		       bd 00 fe 	      LDA	AesTable,X	; 4
   1251  f608		       c5 c1		      CMP	TrafficChance	;3
   1252  f60a		       b0 04		      BCS	FinishDrawTraffic1	; 2
   1253  f60c		       a9 ff		      LDA	#$FF	;2
   1254  f60e		       85 84		      STA	GRP1Cache	;3
   1255  f610				   FinishDrawTraffic1
   1256  f610
   1257  f610				   DrawTraffic2 		; 33
   1258  f610		       98		      TYA		; 2
   1259  f611		       18		      CLC		; 2 
   1260  f612		       65 99		      ADC	TrafficOffset2 + 1	;3
   1261  f614		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1262  f616		       b0 05		      BCS	EorOffsetWithCarry2	; 4 max if branch max, 2 otherwise
   1263  f618		       45 9a		      EOR	TrafficOffset2 + 2	; 3
   1264  f61a		       4c 1f f6 	      JMP	AfterEorOffsetWithCarry2	; 3
   1265  f61d				   EorOffsetWithCarry2
   1266  f61d		       45 9b		      EOR	TrafficOffset2 + 3	; 3
   1267  f61f				   AfterEorOffsetWithCarry2		;17
   1268  f61f		       aa		      TAX		;2
   1269  f620		       bd 00 fe 	      LDA	AesTable,X	; 4
   1270  f623		       c5 c1		      CMP	TrafficChance	;3
   1271  f625		       b0 04		      BCS	FinishDrawTraffic2	; 2
   1272  f627		       a9 02		      LDA	#%00000010	;2
   1273  f629		       85 85		      STA	ENABLCache	;3
   1274  f62b				   FinishDrawTraffic2
   1275  f62b
   1276  f62b							;STA WSYNC ;65 / 137
   1277  f62b
   1278  f62b							; LDA Tmp0 ; Flicker this line if drawing car
   1279  f62b							; BEQ FinishDrawTraffic4
   1280  f62b				   DrawTraffic3 		; 33
   1281  f62b		       98		      TYA		; 2
   1282  f62c		       18		      CLC		; 2 
   1283  f62d		       65 9d		      ADC	TrafficOffset3 + 1	;3
   1284  f62f		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1285  f631		       b0 05		      BCS	EorOffsetWithCarry3	; 4 max if branch max, 2 otherwise
   1286  f633		       45 9e		      EOR	TrafficOffset3 + 2	; 3
   1287  f635		       4c 3a f6 	      JMP	AfterEorOffsetWithCarry3	; 3
   1288  f638				   EorOffsetWithCarry3
   1289  f638		       45 9f		      EOR	TrafficOffset3 + 3	; 3
   1290  f63a				   AfterEorOffsetWithCarry3		;17
   1291  f63a		       aa		      TAX		;2
   1292  f63b		       bd 00 fe 	      LDA	AesTable,X	; 4
   1293  f63e		       c5 c1		      CMP	TrafficChance	;3
   1294  f640		       b0 04		      BCS	FinishDrawTraffic3	; 2 
   1295  f642		       a9 02		      LDA	#%00000010	;2
   1296  f644		       85 86		      STA	ENAM0Cache
   1297  f646				   FinishDrawTraffic3
   1298  f646
   1299  f646				   DrawTraffic4 		; 33
   1300  f646		       98		      TYA		; 2
   1301  f647		       18		      CLC		; 2 
   1302  f648		       65 a1		      ADC	TrafficOffset4 + 1	;3
   1303  f64a		       29 f8		      AND	#TRAFFIC_1_MASK	;2
   1304  f64c		       b0 05		      BCS	EorOffsetWithCarry4	; 4 max if branch max, 2 otherwise
   1305  f64e		       45 a2		      EOR	TrafficOffset4 + 2	; 3
   1306  f650		       4c 55 f6 	      JMP	AfterEorOffsetWithCarry4	; 3
   1307  f653				   EorOffsetWithCarry4
   1308  f653		       45 a3		      EOR	TrafficOffset4 + 3	; 3
   1309  f655				   AfterEorOffsetWithCarry4		;17
   1310  f655		       aa		      TAX		;2
   1311  f656		       bd 00 fe 	      LDA	AesTable,X	; 4
   1312  f659		       c5 c1		      CMP	TrafficChance	;3
   1313  f65b		       b0 04		      BCS	FinishDrawTraffic4	; 2
   1314  f65d		       a9 02		      LDA	#%00000010	;2
   1315  f65f		       85 87		      STA	ENAM1Cache	;3
   1316  f661				   FinishDrawTraffic4
   1317  f661
   1318  f661				   DrawTraffic0 		; 20
   1319  f661		       98		      TYA		;2
   1320  f662		       29 07		      AND	#%00000111	;2
   1321  f664		       aa		      TAX		;2
   1322  f665		       b5 d8		      LDA	ParallaxCache,X	;4
   1323  f667		       85 82		      STA	PF1Cache	;3
   1324  f669		       b5 f0		      LDA	ParallaxCache2,X	;4
   1325  f66b		       85 81		      STA	PF0Cache	;3
   1326  f66d
   1327  f66d				   SkipDrawTraffic0
   1328  f66d
   1329  f66d				   WhileScanLoop
   1330  f66d		       88		      DEY		;2
   1331  f66e		       30 03		      BMI	FinishScanLoop	;2 two big Breach, needs JMP
   1332  f670		       4c c9 f5 	      JMP	ScanLoop	;3
   1333  f673				   FinishScanLoop		; 7 209 of 222
   1334  f673
   1335  f673		       85 02		      STA	WSYNC	;3 Draw the last line, without wrapping
   1336  f675		       20 83 f7 	      JSR	LoadAll
   1337  f678		       85 02		      STA	WSYNC	; do stuff!
   1338  f67a		       85 02		      STA	WSYNC
   1339  f67c		       85 02		      STA	WSYNC
   1340  f67e							;42 cycles to use here
   1341  f67e
   1342  f67e				   PrepareOverscan
   1343  f67e		       a9 02		      LDA	#2
   1344  f680		       85 02		      STA	WSYNC
   1345  f682		       85 01		      STA	VBLANK
   1346  f684
   1347  f684		       a9 06		      LDA	#6	; 2 more lines before overscan (was 37)...
   1348  f686		       8d 96 02 	      STA	TIM64T
   1349  f689
   1350  f689				   LeftSound		;41
   1351  f689		       a5 ba		      LDA	CountdownTimer	;3
   1352  f68b		       f0 1b		      BEQ	EngineOff	;2
   1353  f68d		       a6 ad		      LDX	Gear
   1354  f68f		       a5 8e		      LDA	Player0SpeedL	;3
   1355  f691		       4a		      LSR		;2
   1356  f692		       4a		      LSR		;2
   1357  f693		       4a		      LSR		;2
   1358  f694		       29 0f		      AND	#%00001111	;2
   1359  f696		       85 b0		      STA	Tmp0	;3
   1360  f698		       bd d5 fd 	      LDA	EngineBaseFrequence,X	; 4 Max of 5 bits
   1361  f69b		       38		      SEC		;2
   1362  f69c		       e5 b0		      SBC	Tmp0	;3
   1363  f69e		       85 17		      STA	AUDF0	;3
   1364  f6a0		       bd cf fd 	      LDA	EngineSoundType,X	;4
   1365  f6a3		       85 15		      STA	AUDC0	;3
   1366  f6a5		       4c ac f6 	      JMP	EndLeftSound	;3
   1367  f6a8				   EngineOff
   1368  f6a8		       a9 00		      LDA	#0
   1369  f6aa		       85 15		      STA	AUDC0
   1370  f6ac
   1371  f6ac				   EndLeftSound
   1372  f6ac
   1373  f6ac
   1374  f6ac				   RightSound		; 71 More speed = smaller frequency divider. Just getting speed used MSB. (0 to 23)
   1375  f6ac		       a5 d5		      LDA	ScoreFontColor	;3
   1376  f6ae		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1377  f6b0		       f0 6a		      BEQ	MuteRightSound	;2 A little bit of silence, since you will be run over all the time
   1378  f6b2		       c9 d8		      CMP	#SCORE_FONT_COLOR_GOOD	;2
   1379  f6b4		       f0 29		      BEQ	PlayCheckpoint	;2
   1380  f6b6		       a5 b8		      LDA	CollisionCounter	;3
   1381  f6b8		       c9 e0		      CMP	#$E0	;2
   1382  f6ba		       b0 14		      BCS	PlayColision	;2
   1383  f6bc		       a5 d7		      LDA	NextCheckpoint	;3
   1384  f6be		       38		      SEC		;2
   1385  f6bf		       e5 92		      SBC	TrafficOffset0 + 2	;3
   1386  f6c1		       c9 02		      CMP	#$02	;2
   1387  f6c3		       90 2c		      BCC	PlayBeforeCheckpoint	;4
   1388  f6c5		       a5 ba		      LDA	CountdownTimer	; 3
   1389  f6c7		       f0 53		      BEQ	MuteRightSound	;2
   1390  f6c9		       c9 0a		      CMP	#WARN_TIME_ENDING	;2
   1391  f6cb		       90 37		      BCC	PlayWarnTimeEnding	;4
   1392  f6cd		       4c 1c f7 	      JMP	MuteRightSound	;3
   1393  f6d0				   PlayColision
   1394  f6d0		       a9 1f		      LDA	#31
   1395  f6d2		       85 18		      STA	AUDF1
   1396  f6d4		       a9 08		      LDA	#8
   1397  f6d6		       85 16		      STA	AUDC1
   1398  f6d8		       a9 08		      LDA	#8
   1399  f6da		       85 1a		      STA	AUDV1
   1400  f6dc		       4c 20 f7 	      JMP	EndRightSound
   1401  f6df
   1402  f6df				   PlayCheckpoint
   1403  f6df		       a5 d6		      LDA	ScoreFontColorHoldChange	;3
   1404  f6e1		       4a		      LSR		;2
   1405  f6e2		       4a		      LSR		;2
   1406  f6e3		       4a		      LSR		;2
   1407  f6e4		       85 18		      STA	AUDF1	;3
   1408  f6e6		       a9 0c		      LDA	#12	;2
   1409  f6e8		       85 16		      STA	AUDC1	;3
   1410  f6ea		       a9 06		      LDA	#6	;2
   1411  f6ec		       85 1a		      STA	AUDV1	;3
   1412  f6ee		       4c 20 f7 	      JMP	EndRightSound	;3
   1413  f6f1
   1414  f6f1				   PlayBeforeCheckpoint
   1415  f6f1		       a5 8c		      LDA	FrameCount0	;3
   1416  f6f3		       29 1c		      AND	#%00011100	;2
   1417  f6f5		       09 03		      ORA	#%00000011	;2
   1418  f6f7		       85 18		      STA	AUDF1	;3
   1419  f6f9		       a9 0c		      LDA	#12	;2
   1420  f6fb		       85 16		      STA	AUDC1	;3
   1421  f6fd		       a9 03		      LDA	#3	;2
   1422  f6ff		       85 1a		      STA	AUDV1	;3
   1423  f701		       4c 20 f7 	      JMP	EndRightSound	;3
   1424  f704
   1425  f704				   PlayWarnTimeEnding
   1426  f704		       a5 8c		      LDA	FrameCount0	;3
   1427  f706		       29 04		      AND	#%00000100	;2
   1428  f708		       f0 12		      BEQ	MuteRightSound	;2 Bip at regular intervals
   1429  f70a		       18		      CLC		;2
   1430  f70b		       a9 0a		      LDA	#10	;2
   1431  f70d		       65 ba		      ADC	CountdownTimer	;2
   1432  f70f		       85 18		      STA	AUDF1	;3
   1433  f711		       a9 0c		      LDA	#12	;2
   1434  f713		       85 16		      STA	AUDC1	;3
   1435  f715		       a9 03		      LDA	#3	;2
   1436  f717		       85 1a		      STA	AUDV1	;3
   1437  f719		       4c 20 f7 	      JMP	EndRightSound	;3
   1438  f71c
   1439  f71c				   MuteRightSound
   1440  f71c		       a9 00		      LDA	#0
   1441  f71e		       85 1a		      STA	AUDV1
   1442  f720				   EndRightSound
   1443  f720
   1444  f720				   ExactlyEverySecond		; 88 Here to use this nice extra cycles of the 5 scanlines
   1445  f720		       a5 c0		      LDA	GameStatus	;3
   1446  f722		       f0 36		      BEQ	EndExactlyEverySecond	; 2 Count only while game running
   1447  f724		       a5 d5		      LDA	ScoreFontColor	;3
   1448  f726		       c9 0c		      CMP	#SCORE_FONT_COLOR_OVER	;2
   1449  f728		       f0 30		      BEQ	EndExactlyEverySecond	;2
   1450  f72a		       c6 cf		      DEC	OneSecondConter	;5
   1451  f72c		       d0 2c		      BNE	EndExactlyEverySecond	;2
   1452  f72e
   1453  f72e		       f8		      SED		;2 BCD Operations after this point
   1454  f72f				   CountGlideTimeBcd
   1455  f72f		       a5 d5		      LDA	ScoreFontColor	;3
   1456  f731		       c9 44		      CMP	#SCORE_FONT_COLOR_BAD	;2
   1457  f733		       d0 0d		      BNE	EndCountGlideTimeBcd	;2
   1458  f735		       18		      CLC		;2
   1459  f736		       a5 cd		      LDA	GlideTimeBcd0	;3
   1460  f738		       69 01		      ADC	#1	;3
   1461  f73a		       85 cd		      STA	GlideTimeBcd0	;3
   1462  f73c		       a5 ce		      LDA	GlideTimeBcd1	;3
   1463  f73e		       69 00		      ADC	#0	;2
   1464  f740		       85 ce		      STA	GlideTimeBcd1	;3
   1465  f742				   EndCountGlideTimeBcd
   1466  f742				   IncreaseTotalTimerBcd
   1467  f742		       18		      CLC		;2
   1468  f743		       a5 bd		      LDA	TimeBcd0	;3
   1469  f745		       69 01		      ADC	#1	;2
   1470  f747		       85 bd		      STA	TimeBcd0	;3
   1471  f749		       a5 be		      LDA	TimeBcd1	;3
   1472  f74b		       69 00		      ADC	#0	;2
   1473  f74d		       85 be		      STA	TimeBcd1	;3
   1474  f74f		       a5 bf		      LDA	TimeBcd2	;3
   1475  f751		       69 00		      ADC	#0	;2
   1476  f753		       85 bf		      STA	TimeBcd2	;3
   1477  f755
   1478  f755				   ResetOneSecondCounter
   1479  f755		       d8		      CLD		;2
   1480  f756		       a9 3c		      LDA	#ONE_SECOND_FRAMES	;3
   1481  f758		       85 cf		      STA	OneSecondConter	;3
   1482  f75a
   1483  f75a				   EndExactlyEverySecond
   1484  f75a
   1485  f75a				   OverScanWait
   1486  f75a		       ad 84 02 	      LDA	INTIM
   1487  f75d		       d0 fb		      BNE	OverScanWait	;Is there a better way?	
   1488  f75f		       4c c0 f0 	      JMP	MainLoop
   1489  f762
   1490  f762				   Subroutines
   1491  f762
   1492  f762				   ClearAll		; 52
   1493  f762		       a9 00		      LDA	#0	;2
   1494  f764		       85 1c		      STA	GRP1	;3
   1495  f766		       85 1f		      STA	ENABL	;3
   1496  f768		       85 1d		      STA	ENAM0	;3
   1497  f76a		       85 1e		      STA	ENAM1	;3
   1498  f76c		       85 84		      STA	GRP1Cache	;3
   1499  f76e		       85 85		      STA	ENABLCache	;3
   1500  f770		       85 86		      STA	ENAM0Cache	;3
   1501  f772		       85 87		      STA	ENAM1Cache	;3
   1502  f774
   1503  f774				   ClearPF		; 26
   1504  f774		       a9 00		      LDA	#0	;2
   1505  f776				   ClearPFSkipLDA0
   1506  f776		       85 0d		      STA	PF0	;3
   1507  f778		       85 0e		      STA	PF1	;3
   1508  f77a		       85 0f		      STA	PF2	;3	
   1509  f77c		       85 81		      STA	PF0Cache	;3
   1510  f77e		       85 82		      STA	PF1Cache	;3
   1511  f780		       85 83		      STA	PF2Cache	;3 
   1512  f782		       60		      RTS		;6
   1513  f783				   EndClearAll
   1514  f783
   1515  f783				   LoadAll		; 48
   1516  f783		       a5 81		      LDA	PF0Cache	;3
   1517  f785		       85 0d		      STA	PF0	;3
   1518  f787
   1519  f787		       a5 82		      LDA	PF1Cache	;3
   1520  f789		       85 0e		      STA	PF1	;3
   1521  f78b
   1522  f78b		       a5 83		      LDA	PF2Cache	;3
   1523  f78d		       85 0f		      STA	PF2	;3
   1524  f78f
   1525  f78f		       a5 84		      LDA	GRP1Cache	;3
   1526  f791		       85 1c		      STA	GRP1	;3
   1527  f793
   1528  f793		       a5 85		      LDA	ENABLCache	;3
   1529  f795		       85 1f		      STA	ENABL	;3
   1530  f797
   1531  f797		       a5 86		      LDA	ENAM0Cache	;3
   1532  f799		       85 1d		      STA	ENAM0	;3
   1533  f79b
   1534  f79b		       a5 87		      LDA	ENAM1Cache	;3
   1535  f79d		       85 1e		      STA	ENAM1	;3
   1536  f79f
   1537  f79f		       60		      RTS		;6
   1538  f7a0				   EndLoadAll
   1539  f7a0
   1540  f7a0				   NextDifficulty
   1541  f7a0		       a5 c5		      LDA	GameMode	; For now, even games change the difficult
   1542  f7a2		       29 01		      AND	#%00000001
   1543  f7a4		       d0 24		      BNE	CheckRandomDifficulty
   1544  f7a6
   1545  f7a6		       a5 c4		      LDA	CurrentDifficulty
   1546  f7a8		       18		      CLC
   1547  f7a9		       69 01		      ADC	#1
   1548  f7ab		       29 03		      AND	#%00000011	; 0 to 3
   1549  f7ad		       85 c4		      STA	CurrentDifficulty
   1550  f7af
   1551  f7af				   ConfigureDifficulty
   1552  f7af		       a4 c4		      LDY	CurrentDifficulty	;Needed, not always NextDifficulty is entrypoint
   1553  f7b1		       b9 e7 ff 	      LDA	TrafficChanceTable,Y
   1554  f7b4		       85 c1		      STA	TrafficChance
   1555  f7b6		       b9 e3 ff 	      LDA	TrafficColorTable,Y
   1556  f7b9		       85 c3		      STA	TrafficColor
   1557  f7bb
   1558  f7bb		       a5 c5		      LDA	GameMode	;
   1559  f7bd		       29 01		      AND	#%00000001
   1560  f7bf		       f0 03		      BEQ	UseNextDifficultyTime
   1561  f7c1		       4c c5 f7 	      JMP	StoreDifficultyTime
   1562  f7c4				   UseNextDifficultyTime
   1563  f7c4		       c8		      INY
   1564  f7c5				   StoreDifficultyTime
   1565  f7c5		       b9 eb ff 	      LDA	TrafficTimeTable,Y
   1566  f7c8		       85 c2		      STA	CheckpointTime
   1567  f7ca
   1568  f7ca				   CheckRandomDifficulty
   1569  f7ca		       a5 c5		      LDA	GameMode
   1570  f7cc		       29 08		      AND	#%00001000	; Random difficulties
   1571  f7ce		       f0 09		      BEQ	ReturnFromNextDifficulty
   1572  f7d0				   RandomDifficulty
   1573  f7d0		       a6 8c		      LDX	FrameCount0
   1574  f7d2		       bd 00 fe 	      LDA	AesTable,X
   1575  f7d5							;EOR TrafficChance, no need, lets make life simple
   1576  f7d5		       29 3f		      AND	#%00111111
   1577  f7d7		       85 c1		      STA	TrafficChance
   1578  f7d9
   1579  f7d9				   ReturnFromNextDifficulty
   1580  f7d9		       60		      RTS
   1581  f7da				   EndNextDifficulty
   1582  f7da
   1583  f7da				   DefaultOffsets
   1584  f7da		       a9 20		      LDA	#$20
   1585  f7dc		       85 96		      STA	TrafficOffset1 + 2
   1586  f7de		       a9 40		      LDA	#$40
   1587  f7e0		       85 9a		      STA	TrafficOffset2 + 2	;Initial Y Position
   1588  f7e2		       a9 60		      LDA	#$60
   1589  f7e4		       85 9e		      STA	TrafficOffset3 + 2	;Initial Y Position
   1590  f7e6		       a9 80		      LDA	#$80
   1591  f7e8		       85 a2		      STA	TrafficOffset4 + 2	;Initial Y Position
   1592  f7ea		       a9 a0		      LDA	#$A0
   1593  f7ec		       60		      RTS
   1594  f7ed
   1595  f7ed				   PrintStaticText		; Preload X with the offset referent to StaticText
   1596  f7ed		       bd 00 ff 	      LDA	StaticText,X
   1597  f7f0		       85 d0		      STA	ScoreD0
   1598  f7f2		       e8		      INX
   1599  f7f3		       bd 00 ff 	      LDA	StaticText,X
   1600  f7f6		       85 d1		      STA	ScoreD1
   1601  f7f8		       e8		      INX
   1602  f7f9		       bd 00 ff 	      LDA	StaticText,X
   1603  f7fc		       85 d2		      STA	ScoreD2
   1604  f7fe		       e8		      INX
   1605  f7ff		       bd 00 ff 	      LDA	StaticText,X
   1606  f802		       85 d3		      STA	ScoreD3
   1607  f804		       e8		      INX
   1608  f805		       bd 00 ff 	      LDA	StaticText,X
   1609  f808		       85 d4		      STA	ScoreD4
   1610  f80a		       60		      RTS
   1611  f80b
   1612  f80b				   HorizontalParallaxLoop
   1613  f80b		       a9 ef		      LDA	#%11101111	; Clear the house
   1614  f80d		       39 d8 00 	      AND	ParallaxCache,Y
   1615  f810		       99 d8 00 	      STA	ParallaxCache,Y
   1616  f813				   CalculateParallax0
   1617  f813		       98		      TYA
   1618  f814		       18		      CLC
   1619  f815		       65 91		      ADC	TrafficOffset0 + 1
   1620  f817		       29 04		      AND	#%00000100
   1621  f819		       f0 08		      BEQ	HasEmptySpace0
   1622  f81b				   HasBorder0
   1623  f81b		       b9 d8 00 	      LDA	ParallaxCache,Y
   1624  f81e		       09 0f		      ORA	#%00001111
   1625  f820		       4c 28 f8 	      JMP	StoreParallax0
   1626  f823				   HasEmptySpace0
   1627  f823		       b9 d8 00 	      LDA	ParallaxCache,Y
   1628  f826		       29 f0		      AND	#%11110000
   1629  f828
   1630  f828				   StoreParallax0
   1631  f828		       99 d8 00 	      STA	ParallaxCache,Y
   1632  f82b
   1633  f82b				   CalculateParallax1
   1634  f82b		       98		      TYA
   1635  f82c		       18		      CLC
   1636  f82d		       65 c7		      ADC	ParallaxOffset1 + 1
   1637  f82f		       29 04		      AND	#%00000100
   1638  f831		       f0 08		      BEQ	HasEmptySpace1
   1639  f833				   HasBorder1
   1640  f833		       b9 d8 00 	      LDA	ParallaxCache,Y
   1641  f836		       09 e0		      ORA	#%11100000
   1642  f838		       4c 40 f8 	      JMP	StoreParallax1
   1643  f83b				   HasEmptySpace1
   1644  f83b		       b9 d8 00 	      LDA	ParallaxCache,Y
   1645  f83e		       29 1f		      AND	#%00011111
   1646  f840
   1647  f840				   StoreParallax1
   1648  f840		       99 d8 00 	      STA	ParallaxCache,Y
   1649  f843
   1650  f843				   CalculateParallax2
   1651  f843		       98		      TYA
   1652  f844		       18		      CLC
   1653  f845		       65 c9		      ADC	ParallaxOffset2 + 1
   1654  f847		       29 04		      AND	#%00000100
   1655  f849		       f0 05		      BEQ	HasEmptySpace2
   1656  f84b				   HasBorder2
   1657  f84b		       a9 60		      LDA	#%01100000
   1658  f84d		       4c 52 f8 	      JMP	StoreParallax2
   1659  f850				   HasEmptySpace2
   1660  f850		       a9 00		      LDA	#0
   1661  f852
   1662  f852				   StoreParallax2
   1663  f852		       99 f0 00 	      STA	ParallaxCache2,Y
   1664  f855
   1665  f855				   ContinueHorizontalParallaxLoop
   1666  f855		       88		      DEY
   1667  f856		       10 b3		      BPL	HorizontalParallaxLoop
   1668  f858		       60		      RTS
   1669  f859
   1670  f859				   DefaultBorderLoop
   1671  f859				   CalculateDefaultBorder
   1672  f859		       98		      TYA
   1673  f85a		       18		      CLC
   1674  f85b		       65 91		      ADC	TrafficOffset0 + 1
   1675  f85d		       29 04		      AND	#%00000100
   1676  f85f		       f0 05		      BEQ	HasEmptySpace
   1677  f861				   HasBorder
   1678  f861		       a9 ff		      LDA	#$FF
   1679  f863		       4c 68 f8 	      JMP	StoreBorder
   1680  f866				   HasEmptySpace
   1681  f866		       a9 00		      LDA	#0
   1682  f868
   1683  f868				   StoreBorder
   1684  f868		       99 d8 00 	      STA	ParallaxCache,Y
   1685  f86b		       a9 00		      LDA	#0
   1686  f86d		       99 f0 00 	      STA	ParallaxCache2,Y	; Clear other modes
   1687  f870
   1688  f870				   ContinueDefaultBorderLoop
   1689  f870		       88		      DEY
   1690  f871		       10 e6		      BPL	DefaultBorderLoop
   1691  f873		       60		      RTS
   1692  f874
   1693  f874				   PrepareTachometerBorderLoop
   1694  f874		       a5 8e		      LDA	Player0SpeedL
   1695  f876		       4a		      LSR
   1696  f877		       4a		      LSR
   1697  f878		       4a		      LSR
   1698  f879		       4a		      LSR
   1699  f87a		       29 07		      AND	#%00000111
   1700  f87c		       85 b1		      STA	Tmp1	; RPM
   1701  f87e		       a6 a9		      LDX	CurrentCarId	; Y cannot be destroyed here
   1702  f880		       bd d9 ff 	      LDA	CarIdToMaxGear,X
   1703  f883		       85 b2		      STA	Tmp2	; Max Gear
   1704  f885
   1705  f885				   TachometerBorderLoop
   1706  f885		       98		      TYA
   1707  f886		       18		      CLC
   1708  f887		       65 91		      ADC	TrafficOffset0 + 1
   1709  f889		       29 04		      AND	#%00000100
   1710  f88b		       f0 10		      BEQ	HasBorderTac
   1711  f88d		       a6 ad		      LDX	Gear
   1712  f88f		       bd eb fd 	      LDA	TachometerGearLookup,X
   1713  f892		       99 d8 00 	      STA	ParallaxCache,Y
   1714  f895		       a9 00		      LDA	#0
   1715  f897		       99 f0 00 	      STA	ParallaxCache2,Y
   1716  f89a		       4c bf f8 	      JMP	ContinueBorderTac
   1717  f89d				   HasBorderTac
   1718  f89d		       a5 b2		      LDA	Tmp2	; Max Gear
   1719  f89f		       c5 ad		      CMP	Gear	; Only on max speed
   1720  f8a1		       f0 11		      BEQ	FullBorderTac
   1721  f8a3		       a6 b1		      LDX	Tmp1
   1722  f8a5		       bd db fd 	      LDA	TachometerSizeLookup1,X
   1723  f8a8		       99 d8 00 	      STA	ParallaxCache,Y
   1724  f8ab		       bd e3 fd 	      LDA	TachometerSizeLookup2,X
   1725  f8ae		       99 f0 00 	      STA	ParallaxCache2,Y
   1726  f8b1		       4c bf f8 	      JMP	ContinueBorderTac
   1727  f8b4
   1728  f8b4				   FullBorderTac
   1729  f8b4		       a9 ff		      LDA	#$FF
   1730  f8b6		       99 d8 00 	      STA	ParallaxCache,Y
   1731  f8b9		       99 f0 00 	      STA	ParallaxCache2,Y
   1732  f8bc		       4c bf f8 	      JMP	ContinueBorderTac
   1733  f8bf
   1734  f8bf				   ContinueBorderTac
   1735  f8bf		       88		      DEY
   1736  f8c0		       10 c3		      BPL	TachometerBorderLoop
   1737  f8c2		       60		      RTS
   1738  f8c3
   1739  f8c3				   VerticalParallaxLoop
   1740  f8c3				   CalculateVerticalParallax0
   1741  f8c3		       98		      TYA
   1742  f8c4		       18		      CLC
   1743  f8c5		       65 91		      ADC	TrafficOffset0 + 1
   1744  f8c7		       29 06		      AND	#%00000110
   1745  f8c9		       d0 0b		      BNE	HasNoVerticalLine0
   1746  f8cb				   HasVerticalLine0
   1747  f8cb		       a9 ff		      LDA	#$FF
   1748  f8cd		       99 d8 00 	      STA	ParallaxCache,Y
   1749  f8d0		       99 f0 00 	      STA	ParallaxCache2,Y
   1750  f8d3		       4c 13 f9 	      JMP	ContinueVerticalParallaxLoop	; Biggest line possible
   1751  f8d6				   HasNoVerticalLine0
   1752  f8d6		       a9 00		      LDA	#0
   1753  f8d8		       99 d8 00 	      STA	ParallaxCache,Y
   1754  f8db		       99 f0 00 	      STA	ParallaxCache2,Y
   1755  f8de
   1756  f8de				   CalculateVerticalParallax1
   1757  f8de		       98		      TYA
   1758  f8df		       18		      CLC
   1759  f8e0		       65 c7		      ADC	ParallaxOffset1 + 1
   1760  f8e2		       29 07		      AND	#%00000111
   1761  f8e4		       d0 0d		      BNE	HasNoVerticalLine1
   1762  f8e6
   1763  f8e6				   HasVerticalLine1
   1764  f8e6		       a9 fc		      LDA	#%11111100
   1765  f8e8		       99 d8 00 	      STA	ParallaxCache,Y
   1766  f8eb		       a9 c0		      LDA	#%11000000
   1767  f8ed		       99 f0 00 	      STA	ParallaxCache2,Y
   1768  f8f0		       4c 13 f9 	      JMP	ContinueVerticalParallaxLoop
   1769  f8f3				   HasNoVerticalLine1
   1770  f8f3		       a9 00		      LDA	#0
   1771  f8f5		       99 d8 00 	      STA	ParallaxCache,Y
   1772  f8f8		       99 f0 00 	      STA	ParallaxCache2,Y
   1773  f8fb
   1774  f8fb				   CalculateVerticalParallax2
   1775  f8fb		       98		      TYA
   1776  f8fc		       18		      CLC
   1777  f8fd		       65 c9		      ADC	ParallaxOffset2 + 1
   1778  f8ff		       29 07		      AND	#%00000111
   1779  f901		       d0 08		      BNE	HasNoVerticalLine2
   1780  f903
   1781  f903				   HasVerticalLine2
   1782  f903		       a9 f0		      LDA	#%11110000
   1783  f905		       99 d8 00 	      STA	ParallaxCache,Y
   1784  f908		       4c 13 f9 	      JMP	ContinueVerticalParallaxLoop
   1785  f90b				   HasNoVerticalLine2
   1786  f90b		       a9 00		      LDA	#0
   1787  f90d		       99 d8 00 	      STA	ParallaxCache,Y
   1788  f910		       99 f0 00 	      STA	ParallaxCache2,Y
   1789  f913
   1790  f913				   ContinueVerticalParallaxLoop
   1791  f913		       88		      DEY
   1792  f914		       10 ad		      BPL	VerticalParallaxLoop
   1793  f916		       60		      RTS
   1794  f917
   1795  f917				   PrintEasterEgg		; Not very optimized, but I have cycles to spare.
   1796  f917		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   1797  f919		       85 d5		      STA	ScoreFontColor
   1798  f91b		       a9 01		      LDA	#1
   1799  f91d		       85 d6		      STA	ScoreFontColorHoldChange
   1800  f91f
   1801  f91f		       a5 8d		      LDA	FrameCount1
   1802  f921		       29 07		      AND	#%00000111
   1803  f923		       85 b3		      STA	Tmp3
   1804  f925							;0 is Zelda Name, (default)
   1805  f925		       a9 01		      LDA	#1
   1806  f927		       c5 b3		      CMP	Tmp3
   1807  f929		       f0 38		      BEQ	PrintZeldaDateLeft
   1808  f92b
   1809  f92b		       a9 02		      LDA	#2
   1810  f92d		       c5 b3		      CMP	Tmp3
   1811  f92f		       f0 23		      BEQ	PrintPolvinhosLeft
   1812  f931
   1813  f931		       a9 03		      LDA	#3
   1814  f933		       c5 b3		      CMP	Tmp3
   1815  f935		       f0 31		      BEQ	PrintPolvinhosDateLeft
   1816  f937
   1817  f937		       a9 04		      LDA	#4
   1818  f939		       c5 b3		      CMP	Tmp3
   1819  f93b		       f0 1c		      BEQ	PrintIvonneLeft
   1820  f93d
   1821  f93d		       a9 05		      LDA	#5
   1822  f93f		       c5 b3		      CMP	Tmp3
   1823  f941		       f0 2a		      BEQ	PrintIvonneDateLeft
   1824  f943
   1825  f943		       a9 06		      LDA	#6
   1826  f945		       c5 b3		      CMP	Tmp3
   1827  f947		       f0 15		      BEQ	PrintArtLeft
   1828  f949
   1829  f949		       a9 07		      LDA	#7
   1830  f94b		       c5 b3		      CMP	Tmp3
   1831  f94d		       f0 23		      BEQ	PrintLeonardoLeft
   1832  f94f
   1833  f94f				   PrintZeldaLeft
   1834  f94f		       a2 28		      LDX	#<ZeldaTextLeft
   1835  f951		       4c 77 f9 	      JMP	ProcessPrintEasterEgg
   1836  f954				   PrintPolvinhosLeft
   1837  f954		       a2 3c		      LDX	#<PolvinhosTextLeft
   1838  f956		       4c 77 f9 	      JMP	ProcessPrintEasterEgg
   1839  f959				   PrintIvonneLeft
   1840  f959		       a2 50		      LDX	#<IvonneTextLeft
   1841  f95b		       4c 77 f9 	      JMP	ProcessPrintEasterEgg
   1842  f95e				   PrintArtLeft
   1843  f95e		       a2 64		      LDX	#<PaperArtTextLeft
   1844  f960		       4c 77 f9 	      JMP	ProcessPrintEasterEgg
   1845  f963
   1846  f963				   PrintZeldaDateLeft
   1847  f963		       a2 32		      LDX	#<ZeldaDateLeft
   1848  f965		       4c 77 f9 	      JMP	ProcessPrintEasterEgg
   1849  f968				   PrintPolvinhosDateLeft
   1850  f968		       a2 46		      LDX	#<PolvinhosDateLeft
   1851  f96a		       4c 77 f9 	      JMP	ProcessPrintEasterEgg
   1852  f96d				   PrintIvonneDateLeft
   1853  f96d		       a2 5a		      LDX	#<IvonneDateLeft
   1854  f96f		       4c 77 f9 	      JMP	ProcessPrintEasterEgg
   1855  f972				   PrintLeonardoLeft
   1856  f972		       a2 6e		      LDX	#<LeonardoTextLeft
   1857  f974		       4c 77 f9 	      JMP	ProcessPrintEasterEgg
   1858  f977
   1859  f977				   ProcessPrintEasterEgg
   1860  f977		       a5 8c		      LDA	FrameCount0	;3
   1861  f979		       29 01		      AND	#%00000001	;2
   1862  f97b		       d0 03		      BNE	TranformIntoRightText
   1863  f97d		       4c 85 f9 	      JMP	PrintEasterEggText
   1864  f980				   TranformIntoRightText		; Just adds 5 to X, texts are properly aligned
   1865  f980		       8a		      TXA
   1866  f981		       18		      CLC
   1867  f982		       69 05		      ADC	#HALF_TEXT_SIZE
   1868  f984		       aa		      TAX
   1869  f985
   1870  f985				   PrintEasterEggText
   1871  f985		       20 ed f7 	      JSR	PrintStaticText
   1872  f988		       60		      RTS
   1873  f989
   1874  f989				   PrintScore		; Runs in 2 lines, this is the best I can do!
   1875  f989		       a2 00		      LDX	#0
   1876  f98b		       a0 04		      LDY	#FONT_OFFSET
   1877  f98d
   1878  f98d				   ScoreLoop		; 20 
   1879  f98d		       85 02		      STA	WSYNC	;2
   1880  f98f
   1881  f98f		       a5 81		      LDA	PF0Cache	;3 Move to a macro?
   1882  f991		       85 0d		      STA	PF0	;3
   1883  f993
   1884  f993		       a5 82		      LDA	PF1Cache	;3
   1885  f995		       85 0e		      STA	PF1	;3
   1886  f997
   1887  f997		       a5 83		      LDA	PF2Cache	;3
   1888  f999		       85 0f		      STA	PF2	;3
   1889  f99b
   1890  f99b				   DrawScoreD0		; 15
   1891  f99b		       a6 d0		      LDX	ScoreD0	; 3
   1892  f99d		       bd 00 fd 	      LDA	Font,X	;4
   1893  f9a0		       85 81		      STA	PF0Cache	;3
   1894  f9a2		       c6 d0		      DEC	ScoreD0	;5
   1895  f9a4
   1896  f9a4				   DrawScoreD1		; 23	
   1897  f9a4		       a6 d1		      LDX	ScoreD1	; 3
   1898  f9a6		       bd 00 fd 	      LDA	Font,X	;4
   1899  f9a9		       0a		      ASL		;2
   1900  f9aa		       0a		      ASL		;2
   1901  f9ab		       0a		      ASL		;2
   1902  f9ac		       0a		      ASL		;2
   1903  f9ad		       85 82		      STA	PF1Cache	;3
   1904  f9af		       c6 d1		      DEC	ScoreD1	;5
   1905  f9b1
   1906  f9b1				   DrawScoreD2		; 20
   1907  f9b1		       a6 d2		      LDX	ScoreD2	; 3
   1908  f9b3		       bd 00 fd 	      LDA	Font,X	;4
   1909  f9b6		       29 0f		      AND	#%00001111	;2
   1910  f9b8		       05 82		      ORA	PF1Cache	;3
   1911  f9ba		       85 82		      STA	PF1Cache	;3
   1912  f9bc		       c6 d2		      DEC	ScoreD2	;5
   1913  f9be
   1914  f9be				   DrawScoreD3		; 23
   1915  f9be		       a6 d3		      LDX	ScoreD3	; 3
   1916  f9c0		       bd 00 fd 	      LDA	Font,X	;4
   1917  f9c3		       4a		      LSR		;2
   1918  f9c4		       4a		      LSR		;2
   1919  f9c5		       4a		      LSR		;2
   1920  f9c6		       4a		      LSR		;2
   1921  f9c7		       85 83		      STA	PF2Cache	;3
   1922  f9c9		       c6 d3		      DEC	ScoreD3	;5
   1923  f9cb
   1924  f9cb				   DrawScoreD4		; 20
   1925  f9cb		       a6 d4		      LDX	ScoreD4	; 3
   1926  f9cd		       bd 00 fd 	      LDA	Font,X	;4
   1927  f9d0		       29 f0		      AND	#%11110000	;2
   1928  f9d2		       05 83		      ORA	PF2Cache	;3
   1929  f9d4		       85 83		      STA	PF2Cache	;3
   1930  f9d6		       c6 d4		      DEC	ScoreD4	;5
   1931  f9d8
   1932  f9d8
   1933  f9d8		       88		      DEY		;2
   1934  f9d9		       10 b2		      BPL	ScoreLoop	;4
   1935  f9db
   1936  f9db		       85 02		      STA	WSYNC
   1937  f9dd		       20 83 f7 	      JSR	LoadAll
   1938  f9e0		       60		      RTS		; 6
   1939  f9e1
   1940  f9e1				   PrintRightDecimalDigits
   1941  f9e1		       b9 00 00 	      LDA	0,Y
   1942  f9e4		       4a		      LSR
   1943  f9e5		       4a		      LSR
   1944  f9e6		       4a		      LSR
   1945  f9e7		       4a		      LSR
   1946  f9e8		       aa		      TAX
   1947  f9e9		       bd be fd 	      LDA	FontLookup,X	;4
   1948  f9ec		       85 d2		      STA	ScoreD2	;3
   1949  f9ee
   1950  f9ee		       b9 00 00 	      LDA	0,Y
   1951  f9f1		       29 0f		      AND	#%00001111
   1952  f9f3		       aa		      TAX
   1953  f9f4		       bd be fd 	      LDA	FontLookup,X	;4
   1954  f9f7		       85 d3		      STA	ScoreD3	;3
   1955  f9f9
   1956  f9f9		       c8		      INY
   1957  f9fa		       b9 00 00 	      LDA	0,Y
   1958  f9fd		       4a		      LSR
   1959  f9fe		       4a		      LSR
   1960  f9ff		       4a		      LSR
   1961  fa00		       4a		      LSR
   1962  fa01		       aa		      TAX
   1963  fa02		       bd be fd 	      LDA	FontLookup,X	;4
   1964  fa05		       85 d0		      STA	ScoreD0	;3
   1965  fa07
   1966  fa07		       b9 00 00 	      LDA	0,Y
   1967  fa0a		       29 0f		      AND	#%00001111
   1968  fa0c		       aa		      TAX
   1969  fa0d		       bd be fd 	      LDA	FontLookup,X	;4
   1970  fa10		       85 d1		      STA	ScoreD1	;3
   1971  fa12
   1972  fa12		       a9 b8		      LDA	#<Triangle + FONT_OFFSET
   1973  fa14		       85 d4		      STA	ScoreD4
   1974  fa16		       60		      RTS
   1975  fa17
   1976  fa17				   PrintLastLeftDecimalDigits
   1977  fa17		       b9 00 00 	      LDA	0,Y
   1978  fa1a		       4a		      LSR
   1979  fa1b		       4a		      LSR
   1980  fa1c		       4a		      LSR
   1981  fa1d		       4a		      LSR
   1982  fa1e		       aa		      TAX
   1983  fa1f		       bd be fd 	      LDA	FontLookup,X	;4
   1984  fa22		       85 d3		      STA	ScoreD3	;3
   1985  fa24		       b9 00 00 	      LDA	0,Y
   1986  fa27		       29 0f		      AND	#%00001111
   1987  fa29		       aa		      TAX
   1988  fa2a		       bd be fd 	      LDA	FontLookup,X	;4
   1989  fa2d		       85 d4		      STA	ScoreD4	;3
   1990  fa2f		       60		      RTS
   1991  fa30
   1992  fa30				   PrintZerosLeft
   1993  fa30		       a9 04		      LDA	#<C0 + FONT_OFFSET
   1994  fa32		       85 d2		      STA	ScoreD2
   1995  fa34		       85 d3		      STA	ScoreD3
   1996  fa36		       85 d4		      STA	ScoreD4
   1997  fa38		       60		      RTS
   1998  fa39
   1999  fa39				   DrawGameOverScoreLine
   2000  fa39		       85 02		      STA	WSYNC
   2001  fa3b		       20 89 f9 	      JSR	PrintScore
   2002  fa3e		       85 02		      STA	WSYNC
   2003  fa40		       85 02		      STA	WSYNC
   2004  fa42		       20 74 f7 	      JSR	ClearPF
   2005  fa45		       60		      RTS
   2006  fa46
   2007  fa46				   DrawGameOverScreenLeft
   2008  fa46		       85 02		      STA	WSYNC
   2009  fa48		       20 74 f7 	      JSR	ClearPF
   2010  fa4b
   2011  fa4b				   DrawBcdScoreLeft
   2012  fa4b		       20 9a fb 	      JSR	Sleep8Lines
   2013  fa4e		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2014  fa50		       85 06		      STA	COLUP0
   2015  fa52		       85 02		      STA	WSYNC
   2016  fa54		       a9 86		      LDA	#<CS + #FONT_OFFSET
   2017  fa56		       85 d0		      STA	ScoreD0
   2018  fa58
   2019  fa58		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2020  fa5a		       85 d1		      STA	ScoreD1
   2021  fa5c
   2022  fa5c		       a5 b7		      LDA	ScoreBcd3
   2023  fa5e		       29 0f		      AND	#%00001111
   2024  fa60		       aa		      TAX
   2025  fa61		       bd be fd 	      LDA	FontLookup,X	;4
   2026  fa64		       85 d2		      STA	ScoreD2	;3
   2027  fa66
   2028  fa66		       a0 b6		      LDY	#ScoreBcd2
   2029  fa68		       20 17 fa 	      JSR	PrintLastLeftDecimalDigits
   2030  fa6b
   2031  fa6b		       20 39 fa 	      JSR	DrawGameOverScoreLine
   2032  fa6e
   2033  fa6e				   DrawTimerLeft
   2034  fa6e		       20 9a fb 	      JSR	Sleep8Lines
   2035  fa71		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2036  fa73		       85 06		      STA	COLUP0
   2037  fa75		       a9 8b		      LDA	#<CT + #FONT_OFFSET
   2038  fa77		       85 d0		      STA	ScoreD0
   2039  fa79		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2040  fa7b		       85 d1		      STA	ScoreD1
   2041  fa7d		       a9 04		      LDA	#<C0 + #FONT_OFFSET
   2042  fa7f		       85 d2		      STA	ScoreD2
   2043  fa81		       a0 bf		      LDY	#TimeBcd2
   2044  fa83		       85 02		      STA	WSYNC
   2045  fa85		       20 17 fa 	      JSR	PrintLastLeftDecimalDigits
   2046  fa88		       20 39 fa 	      JSR	DrawGameOverScoreLine
   2047  fa8b
   2048  fa8b				   DrawGlideTimerLeft
   2049  fa8b		       20 9a fb 	      JSR	Sleep8Lines
   2050  fa8e		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2051  fa90		       85 06		      STA	COLUP0
   2052  fa92		       85 02		      STA	WSYNC
   2053  fa94		       a9 54		      LDA	#<CG + #FONT_OFFSET
   2054  fa96		       85 d0		      STA	ScoreD0
   2055  fa98		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2056  fa9a		       85 d1		      STA	ScoreD1
   2057  fa9c		       20 30 fa 	      JSR	PrintZerosLeft
   2058  fa9f		       20 39 fa 	      JSR	DrawGameOverScoreLine
   2059  faa2
   2060  faa2				   DrawHitCountLeft
   2061  faa2		       20 9a fb 	      JSR	Sleep8Lines
   2062  faa5		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2063  faa7		       85 06		      STA	COLUP0
   2064  faa9		       85 02		      STA	WSYNC
   2065  faab		       a9 59		      LDA	#<CH + #FONT_OFFSET
   2066  faad		       85 d0		      STA	ScoreD0
   2067  faaf		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2068  fab1		       85 d1		      STA	ScoreD1
   2069  fab3		       20 30 fa 	      JSR	PrintZerosLeft
   2070  fab6		       20 39 fa 	      JSR	DrawGameOverScoreLine
   2071  fab9
   2072  fab9				   DrawCheckpointCountLeft
   2073  fab9		       20 9a fb 	      JSR	Sleep8Lines
   2074  fabc		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2075  fabe		       85 06		      STA	COLUP0
   2076  fac0		       85 02		      STA	WSYNC
   2077  fac2		       a9 40		      LDA	#<CC + #FONT_OFFSET
   2078  fac4		       85 d0		      STA	ScoreD0
   2079  fac6		       a9 b3		      LDA	#<Colon + #FONT_OFFSET
   2080  fac8		       85 d1		      STA	ScoreD1
   2081  faca		       20 30 fa 	      JSR	PrintZerosLeft
   2082  facd		       20 39 fa 	      JSR	DrawGameOverScoreLine
   2083  fad0
   2084  fad0				   DrawGameVersionLeft
   2085  fad0		       20 9a fb 	      JSR	Sleep8Lines
   2086  fad3		       a9 49		      LDA	#VERSION_COLOR
   2087  fad5		       85 06		      STA	COLUP0
   2088  fad7
   2089  fad7		       a5 c5		      LDA	GameMode
   2090  fad9		       aa		      TAX
   2091  fada		       bd be fd 	      LDA	FontLookup,X	;4
   2092  fadd		       85 d0		      STA	ScoreD0	;3
   2093  fadf
   2094  fadf		       a5 a9		      LDA	CurrentCarId
   2095  fae1		       aa		      TAX
   2096  fae2		       bd be fd 	      LDA	FontLookup,X	;4
   2097  fae5		       85 d1		      STA	ScoreD1	;3
   2098  fae7
   2099  fae7		       a5 a6		      LDA	StartSWCHB
   2100  fae9		       29 40		      AND	#%01000000	; P0 difficulty
   2101  faeb		       49 40		      EOR	#%01000000	; Reverse bytes
   2102  faed		       2a		      ROL
   2103  faee		       2a		      ROL
   2104  faef		       2a		      ROL
   2105  faf0		       18		      CLC
   2106  faf1		       69 0a		      ADC	#10
   2107  faf3		       aa		      TAX
   2108  faf4		       bd be fd 	      LDA	FontLookup,X	;4
   2109  faf7		       85 d2		      STA	ScoreD2	;3
   2110  faf9
   2111  faf9		       a5 a6		      LDA	StartSWCHB
   2112  fafb		       29 80		      AND	#%10000000	; P0 difficulty
   2113  fafd		       49 80		      EOR	#%10000000	; Reverse bytes
   2114  faff		       2a		      ROL
   2115  fb00		       2a		      ROL
   2116  fb01		       18		      CLC
   2117  fb02		       69 0a		      ADC	#10
   2118  fb04		       aa		      TAX
   2119  fb05		       bd be fd 	      LDA	FontLookup,X	;4
   2120  fb08		       85 d3		      STA	ScoreD3	;3
   2121  fb0a
   2122  fb0a		       a9 a4		      LDA	#<Pipe + FONT_OFFSET
   2123  fb0c		       85 d4		      STA	ScoreD4
   2124  fb0e
   2125  fb0e		       20 39 fa 	      JSR	DrawGameOverScoreLine
   2126  fb11
   2127  fb11		       4c 77 fb 	      JMP	FinalizeDrawGameOver
   2128  fb14
   2129  fb14				   DrawGameOverScreenRight
   2130  fb14		       85 02		      STA	WSYNC
   2131  fb16		       20 74 f7 	      JSR	ClearPF
   2132  fb19
   2133  fb19				   DrawBcdScoreRight
   2134  fb19		       20 9a fb 	      JSR	Sleep8Lines
   2135  fb1c		       a9 f9		      LDA	#SCORE_FONT_COLOR
   2136  fb1e		       85 07		      STA	COLUP1
   2137  fb20		       85 02		      STA	WSYNC
   2138  fb22		       a0 b4		      LDY	#ScoreBcd0
   2139  fb24		       20 e1 f9 	      JSR	PrintRightDecimalDigits
   2140  fb27
   2141  fb27		       20 39 fa 	      JSR	DrawGameOverScoreLine
   2142  fb2a
   2143  fb2a				   DrawTimerRight
   2144  fb2a		       20 9a fb 	      JSR	Sleep8Lines
   2145  fb2d		       a9 38		      LDA	#SCORE_FONT_COLOR_EASTER_EGG
   2146  fb2f		       85 07		      STA	COLUP1
   2147  fb31		       a0 bd		      LDY	#TimeBcd0
   2148  fb33		       20 e1 f9 	      JSR	PrintRightDecimalDigits
   2149  fb36
   2150  fb36		       20 39 fa 	      JSR	DrawGameOverScoreLine
   2151  fb39				   DrawGlideTimeRight
   2152  fb39		       20 9a fb 	      JSR	Sleep8Lines
   2153  fb3c		       a9 44		      LDA	#SCORE_FONT_COLOR_BAD
   2154  fb3e		       85 07		      STA	COLUP1
   2155  fb40		       a0 cd		      LDY	#GlideTimeBcd0
   2156  fb42		       20 e1 f9 	      JSR	PrintRightDecimalDigits
   2157  fb45		       20 39 fa 	      JSR	DrawGameOverScoreLine
   2158  fb48
   2159  fb48				   DrawHitCountRight
   2160  fb48		       20 9a fb 	      JSR	Sleep8Lines
   2161  fb4b		       a9 79		      LDA	#TRAFFIC_COLOR_INTENSE
   2162  fb4d		       85 07		      STA	COLUP1
   2163  fb4f		       a0 cb		      LDY	#HitCountBcd0
   2164  fb51		       20 e1 f9 	      JSR	PrintRightDecimalDigits
   2165  fb54		       20 39 fa 	      JSR	DrawGameOverScoreLine
   2166  fb57
   2167  fb57				   DrawCheckpointCountRight
   2168  fb57		       20 9a fb 	      JSR	Sleep8Lines
   2169  fb5a		       a9 d8		      LDA	#SCORE_FONT_COLOR_GOOD
   2170  fb5c		       85 07		      STA	COLUP1
   2171  fb5e		       a0 a4		      LDY	#CheckpointBcd0
   2172  fb60		       20 e1 f9 	      JSR	PrintRightDecimalDigits
   2173  fb63		       20 39 fa 	      JSR	DrawGameOverScoreLine
   2174  fb66
   2175  fb66				   DrawVersionRight
   2176  fb66		       20 9a fb 	      JSR	Sleep8Lines
   2177  fb69		       a9 49		      LDA	#VERSION_COLOR
   2178  fb6b		       85 07		      STA	COLUP1
   2179  fb6d		       85 02		      STA	WSYNC
   2180  fb6f		       a2 78		      LDX	#<VersionText
   2181  fb71		       20 ed f7 	      JSR	PrintStaticText
   2182  fb74		       20 39 fa 	      JSR	DrawGameOverScoreLine
   2183  fb77
   2184  fb77				   FinalizeDrawGameOver
   2185  fb77		       a9 0c		      LDA	#SCORE_FONT_COLOR_OVER	;Restores the game state
   2186  fb79		       85 d5		      STA	ScoreFontColor
   2187  fb7b		       20 91 fb 	      JSR	Sleep4Lines
   2188  fb7e		       20 a1 fb 	      JSR	Sleep32Lines
   2189  fb81		       20 a1 fb 	      JSR	Sleep32Lines
   2190  fb84		       4c 7e f6 	      JMP	PrepareOverscan
   2191  fb87
   2192  fb87				   WaitForVblankEnd
   2193  fb87		       ad 84 02 	      LDA	INTIM
   2194  fb8a		       d0 fb		      BNE	WaitForVblankEnd
   2195  fb8c		       85 02		      STA	WSYNC
   2196  fb8e		       85 01		      STA	VBLANK
   2197  fb90		       60		      RTS
   2198  fb91
   2199  fb91				   Sleep4Lines
   2200  fb91		       85 02		      STA	WSYNC
   2201  fb93		       85 02		      STA	WSYNC
   2202  fb95		       85 02		      STA	WSYNC
   2203  fb97		       85 02		      STA	WSYNC
   2204  fb99		       60		      RTS
   2205  fb9a
   2206  fb9a				   Sleep8Lines
   2207  fb9a		       20 91 fb 	      JSR	Sleep4Lines
   2208  fb9d		       20 91 fb 	      JSR	Sleep4Lines
   2209  fba0		       60		      RTS
   2210  fba1
   2211  fba1				   Sleep32Lines
   2212  fba1		       20 9a fb 	      JSR	Sleep8Lines
   2213  fba4		       20 9a fb 	      JSR	Sleep8Lines
   2214  fba7		       20 9a fb 	      JSR	Sleep8Lines
   2215  fbaa		       20 9a fb 	      JSR	Sleep8Lines
   2216  fbad		       60		      RTS
   2217  fbae
   2218  fbae							;ALL CONSTANTS FROM HERE (The QrCode routine is the only exception), ALIGN TO AVOID CARRY
   2219  fc00					      org	$FC00
   2220  fc00				   QrCode1
   2221  fc00		       1f		      .byte.b	#%00011111
   2222  fc01		       10		      .byte.b	#%00010000
   2223  fc02		       17		      .byte.b	#%00010111
   2224  fc03		       17		      .byte.b	#%00010111
   2225  fc04		       17		      .byte.b	#%00010111
   2226  fc05		       10		      .byte.b	#%00010000
   2227  fc06		       1f		      .byte.b	#%00011111
   2228  fc07		       00		      .byte.b	#%00000000
   2229  fc08		       17		      .byte.b	#%00010111
   2230  fc09		       10		      .byte.b	#%00010000
   2231  fc0a		       1d		      .byte.b	#%00011101
   2232  fc0b		       16		      .byte.b	#%00010110
   2233  fc0c		       03		      .byte.b	#%00000011
   2234  fc0d		       19		      .byte.b	#%00011001
   2235  fc0e		       13		      .byte.b	#%00010011
   2236  fc0f		       1c		      .byte.b	#%00011100
   2237  fc10		       0b		      .byte.b	#%00001011
   2238  fc11		       00		      .byte.b	#%00000000
   2239  fc12		       1f		      .byte.b	#%00011111
   2240  fc13		       10		      .byte.b	#%00010000
   2241  fc14		       17		      .byte.b	#%00010111
   2242  fc15		       17		      .byte.b	#%00010111
   2243  fc16		       17		      .byte.b	#%00010111
   2244  fc17		       10		      .byte.b	#%00010000
   2245  fc18		       1f		      .byte.b	#%00011111
   2246  fc19
   2247  fc19				   QrCode2
   2248  fc19		       c3		      .byte.b	#%11000011
   2249  fc1a		       9a		      .byte.b	#%10011010
   2250  fc1b		       82		      .byte.b	#%10000010
   2251  fc1c		       da		      .byte.b	#%11011010
   2252  fc1d		       aa		      .byte.b	#%10101010
   2253  fc1e		       ca		      .byte.b	#%11001010
   2254  fc1f		       f3		      .byte.b	#%11110011
   2255  fc20		       78		      .byte.b	#%01111000
   2256  fc21		       df		      .byte.b	#%11011111
   2257  fc22		       fc		      .byte.b	#%11111100
   2258  fc23		       c7		      .byte.b	#%11000111
   2259  fc24		       98		      .byte.b	#%10011000
   2260  fc25		       23		      .byte.b	#%00100011
   2261  fc26		       b9		      .byte.b	#%10111001
   2262  fc27		       d2		      .byte.b	#%11010010
   2263  fc28		       30		      .byte.b	#%00110000
   2264  fc29		       eb		      .byte.b	#%11101011
   2265  fc2a		       28		      .byte.b	#%00101000
   2266  fc2b		       ab		      .byte.b	#%10101011
   2267  fc2c		       72		      .byte.b	#%01110010
   2268  fc2d		       fa		      .byte.b	#%11111010
   2269  fc2e		       7a		      .byte.b	#%01111010
   2270  fc2f		       32		      .byte.b	#%00110010
   2271  fc30		       3a		      .byte.b	#%00111010
   2272  fc31		       63		      .byte.b	#%01100011
   2273  fc32
   2274  fc32				   QrCode3
   2275  fc32		       98		      .byte.b	#%10011000
   2276  fc33		       c3		      .byte.b	#%11000011
   2277  fc34		       39		      .byte.b	#%00111001
   2278  fc35		       34		      .byte.b	#%00110100
   2279  fc36		       ff		      .byte.b	#%11111111
   2280  fc37		       71		      .byte.b	#%01110001
   2281  fc38		       d5		      .byte.b	#%11010101
   2282  fc39		       d1		      .byte.b	#%11010001
   2283  fc3a		       5f		      .byte.b	#%01011111
   2284  fc3b		       26		      .byte.b	#%00100110
   2285  fc3c		       2d		      .byte.b	#%00101101
   2286  fc3d		       e9		      .byte.b	#%11101001
   2287  fc3e		       d6		      .byte.b	#%11010110
   2288  fc3f		       26		      .byte.b	#%00100110
   2289  fc40		       ba		      .byte.b	#%10111010
   2290  fc41		       03		      .byte.b	#%00000011
   2291  fc42		       dd		      .byte.b	#%11011101
   2292  fc43		       e0		      .byte.b	#%11100000
   2293  fc44		       57		      .byte.b	#%01010111
   2294  fc45		       14		      .byte.b	#%00010100
   2295  fc46		       35		      .byte.b	#%00110101
   2296  fc47		       e5		      .byte.b	#%11100101
   2297  fc48		       b5		      .byte.b	#%10110101
   2298  fc49		       d4		      .byte.b	#%11010100
   2299  fc4a		       97		      .byte.b	#%10010111
   2300  fc4b
   2301  fc4b				   QrCode4
   2302  fc4b		       09		      .byte.b	#%00001001
   2303  fc4c		       0e		      .byte.b	#%00001110
   2304  fc4d		       0f		      .byte.b	#%00001111
   2305  fc4e		       0c		      .byte.b	#%00001100
   2306  fc4f		       0c		      .byte.b	#%00001100
   2307  fc50		       08		      .byte.b	#%00001000
   2308  fc51		       08		      .byte.b	#%00001000
   2309  fc52		       06		      .byte.b	#%00000110
   2310  fc53		       06		      .byte.b	#%00000110
   2311  fc54		       0b		      .byte.b	#%00001011
   2312  fc55		       0f		      .byte.b	#%00001111
   2313  fc56		       04		      .byte.b	#%00000100
   2314  fc57		       08		      .byte.b	#%00001000
   2315  fc58		       0f		      .byte.b	#%00001111
   2316  fc59		       09		      .byte.b	#%00001001
   2317  fc5a		       07		      .byte.b	#%00000111
   2318  fc5b		       05		      .byte.b	#%00000101
   2319  fc5c		       00		      .byte.b	#%00000000
   2320  fc5d		       0f		      .byte.b	#%00001111
   2321  fc5e		       08		      .byte.b	#%00001000
   2322  fc5f		       0b		      .byte.b	#%00001011
   2323  fc60		       0b		      .byte.b	#%00001011
   2324  fc61		       0b		      .byte.b	#%00001011
   2325  fc62		       08		      .byte.b	#%00001000
   2326  fc63		       0f		      .byte.b	#%00001111
   2327  fc64
   2328  fc64							; Moved here because of rom space.
   2329  fc64							; The only SBR in constants space
   2330  fc64				   DrawQrCode
   2331  fc64		       a2 0f		      LDX	#QR_CODE_BACKGROUNG	;2
   2332  fc66		       a0 00		      LDY	#QR_CODE_COLOR	;2
   2333  fc68		       a9 01		      LDA	#%00000001	; Mirror playfield
   2334  fc6a		       85 0a		      STA	CTRLPF
   2335  fc6c		       20 62 f7 	      JSR	ClearAll	; To be 100 sure!
   2336  fc6f		       ad 82 02 	      LDA	SWCHB
   2337  fc72		       29 08		      AND	#%00001000	; If Black and white, this will make A = 0
   2338  fc74		       f0 07		      BEQ	StoreReversedQrCode
   2339  fc76		       86 09		      STX	COLUBK
   2340  fc78		       84 08		      STY	COLUPF
   2341  fc7a		       4c 81 fc 	      JMP	ContinueQrCode
   2342  fc7d				   StoreReversedQrCode
   2343  fc7d		       86 08		      STX	COLUPF
   2344  fc7f		       84 09		      STY	COLUBK
   2345  fc81
   2346  fc81				   ContinueQrCode
   2347  fc81		       a0 18		      LDY	#QR_CODE_SIZE - 1
   2348  fc83		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT
   2349  fc85		       20 87 fb 	      JSR	WaitForVblankEnd
   2350  fc88		       20 9a fb 	      JSR	Sleep8Lines
   2351  fc8b		       20 9a fb 	      JSR	Sleep8Lines
   2352  fc8e		       20 9a fb 	      JSR	Sleep8Lines
   2353  fc91
   2354  fc91				   QrCodeLoop		;Assync mirroed playfield, https://atariage.com/forums/topic/149228-a-simple-display-timing-diagram/
   2355  fc91		       85 02		      STA	WSYNC
   2356  fc93		       b9 00 fc 	      LDA	QrCode1,Y	; 4
   2357  fc96		       85 0e		      STA	PF1	;3
   2358  fc98		       b9 19 fc 	      LDA	QrCode2,Y	;4
   2359  fc9b		       85 0f		      STA	PF2	;3
      0  fc9d					      SLEEP	27	; 
      1  fc9d				   .CYCLES    SET	27
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d				  -	      nop	0
     11  fc9d					      ELSE
     12  fc9d		       24 00		      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     17  fc9f					      REPEND
     18  fca0		       ea		      nop
     17  fca0					      REPEND
     18  fca1		       ea		      nop
     17  fca1					      REPEND
     18  fca2		       ea		      nop
     17  fca2					      REPEND
     18  fca3		       ea		      nop
     17  fca3					      REPEND
     18  fca4		       ea		      nop
     17  fca4					      REPEND
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     19  fcab					      REPEND
   2361  fcab		       b9 32 fc 	      LDA	QrCode3,Y	;4
   2362  fcae		       85 0f		      STA	PF2	;3 Write ends at cycle 48 exactly!
   2363  fcb0		       b9 4b fc 	      LDA	QrCode4,Y	; 4
   2364  fcb3		       85 0e		      STA	PF1	;3
   2365  fcb5
   2366  fcb5		       ca		      DEX		;2
   2367  fcb6		       d0 d9		      BNE	QrCodeLoop	;2
   2368  fcb8		       a2 07		      LDX	#QR_CODE_LINE_HEIGHT	;2
   2369  fcba		       88		      DEY		;2
   2370  fcbb		       10 d4		      BPL	QrCodeLoop	;4
   2371  fcbd
   2372  fcbd				   EndQrCodeLoop
   2373  fcbd		       85 02		      STA	WSYNC	;
   2374  fcbf		       a9 00		      LDA	#0
   2375  fcc1		       85 0e		      STA	PF1	;3
   2376  fcc3		       85 0f		      STA	PF2	;3
   2377  fcc5
   2378  fcc5		       20 a1 fb 	      JSR	Sleep32Lines
   2379  fcc8		       4c 7e f6 	      JMP	PrepareOverscan
   2380  fccb
   2381  fd00					      org	$FD00
   2382  fd00				   Font
   2383  fd00				   C0
   2384  fd00		       e7		      .byte.b	#%11100111	;
   2385  fd01		       a5		      .byte.b	#%10100101	; 
   2386  fd02		       a5		      .byte.b	#%10100101	; 
   2387  fd03		       a5		      .byte.b	#%10100101	; 
   2388  fd04		       e7		      .byte.b	#%11100111	;	
   2389  fd05				   C1
   2390  fd05		       e7		      .byte.b	#%11100111	;
   2391  fd06		       42		      .byte.b	#%01000010	; 
   2392  fd07		       42		      .byte.b	#%01000010	; 
   2393  fd08		       42		      .byte.b	#%01000010	; 
   2394  fd09		       66		      .byte.b	#%01100110	;
   2395  fd0a				   C2
   2396  fd0a		       e7		      .byte.b	#%11100111	;
   2397  fd0b		       24		      .byte.b	#%00100100	; 
   2398  fd0c		       e7		      .byte.b	#%11100111	; 
   2399  fd0d		       81		      .byte.b	#%10000001	; 
   2400  fd0e		       e7		      .byte.b	#%11100111	;
   2401  fd0f				   C3
   2402  fd0f		       e7		      .byte.b	#%11100111	;
   2403  fd10		       81		      .byte.b	#%10000001	; 
   2404  fd11		       e7		      .byte.b	#%11100111	; 
   2405  fd12		       81		      .byte.b	#%10000001	; 
   2406  fd13		       e7		      .byte.b	#%11100111	;
   2407  fd14				   C4
   2408  fd14		       81		      .byte.b	#%10000001	;
   2409  fd15		       81		      .byte.b	#%10000001	; 
   2410  fd16		       e7		      .byte.b	#%11100111	; 
   2411  fd17		       a5		      .byte.b	#%10100101	; 
   2412  fd18		       a5		      .byte.b	#%10100101	;
   2413  fd19				   C5
   2414  fd19		       e7		      .byte.b	#%11100111	;
   2415  fd1a		       81		      .byte.b	#%10000001	; 
   2416  fd1b		       e7		      .byte.b	#%11100111	; 
   2417  fd1c		       24		      .byte.b	#%00100100	; 
   2418  fd1d		       e7		      .byte.b	#%11100111	;
   2419  fd1e				   C6
   2420  fd1e		       e7		      .byte.b	#%11100111	;
   2421  fd1f		       a5		      .byte.b	#%10100101	; 
   2422  fd20		       e7		      .byte.b	#%11100111	; 
   2423  fd21		       24		      .byte.b	#%00100100	; 
   2424  fd22		       e7		      .byte.b	#%11100111	;
   2425  fd23				   C7
   2426  fd23		       81		      .byte.b	#%10000001	;
   2427  fd24		       81		      .byte.b	#%10000001	; 
   2428  fd25		       81		      .byte.b	#%10000001	; 
   2429  fd26		       81		      .byte.b	#%10000001	; 
   2430  fd27		       e7		      .byte.b	#%11100111	;
   2431  fd28				   C8
   2432  fd28		       e7		      .byte.b	#%11100111	;
   2433  fd29		       a5		      .byte.b	#%10100101	; 
   2434  fd2a		       e7		      .byte.b	#%11100111	; 
   2435  fd2b		       a5		      .byte.b	#%10100101	; 
   2436  fd2c		       e7		      .byte.b	#%11100111	;
   2437  fd2d				   C9
   2438  fd2d		       e7		      .byte.b	#%11100111	;
   2439  fd2e		       81		      .byte.b	#%10000001	; 
   2440  fd2f		       e7		      .byte.b	#%11100111	; 
   2441  fd30		       a5		      .byte.b	#%10100101	; 
   2442  fd31		       e7		      .byte.b	#%11100111	;
   2443  fd32				   CA
   2444  fd32		       a5		      .byte.b	#%10100101	;
   2445  fd33		       a5		      .byte.b	#%10100101	; 
   2446  fd34		       e7		      .byte.b	#%11100111	; 
   2447  fd35		       a5		      .byte.b	#%10100101	; 
   2448  fd36		       e7		      .byte.b	#%11100111	;
   2449  fd37				   CB
   2450  fd37		       66		      .byte.b	#%01100110	;
   2451  fd38		       a5		      .byte.b	#%10100101	; 
   2452  fd39		       66		      .byte.b	#%01100110	; 
   2453  fd3a		       a5		      .byte.b	#%10100101	;
   2454  fd3b		       66		      .byte.b	#%01100110	;
   2455  fd3c				   CC
   2456  fd3c		       e7		      .byte.b	#%11100111	;
   2457  fd3d		       24		      .byte.b	#%00100100	; 
   2458  fd3e		       24		      .byte.b	#%00100100	; 
   2459  fd3f		       24		      .byte.b	#%00100100	;
   2460  fd40		       e7		      .byte.b	#%11100111	;
   2461  fd41
   2462  fd41				   CD
   2463  fd41		       66		      .byte.b	#%01100110	;
   2464  fd42		       a5		      .byte.b	#%10100101	; 
   2465  fd43		       a5		      .byte.b	#%10100101	; 
   2466  fd44		       a5		      .byte.b	#%10100101	;
   2467  fd45		       66		      .byte.b	#%01100110	;
   2468  fd46
   2469  fd46				   CE
   2470  fd46		       e7		      .byte.b	#%11100111	;
   2471  fd47		       24		      .byte.b	#%00100100	; 
   2472  fd48		       e7		      .byte.b	#%11100111	; 
   2473  fd49		       24		      .byte.b	#%00100100	; 
   2474  fd4a		       e7		      .byte.b	#%11100111	;
   2475  fd4b
   2476  fd4b				   CF
   2477  fd4b		       24		      .byte.b	#%00100100	;
   2478  fd4c		       24		      .byte.b	#%00100100	; 
   2479  fd4d		       e7		      .byte.b	#%11100111	; 
   2480  fd4e		       24		      .byte.b	#%00100100	; 
   2481  fd4f		       e7		      .byte.b	#%11100111	;
   2482  fd50
   2483  fd50				   CG
   2484  fd50		       c3		      .byte.b	#%11000011	;
   2485  fd51		       a5		      .byte.b	#%10100101	; 
   2486  fd52		       a5		      .byte.b	#%10100101	; 
   2487  fd53		       24		      .byte.b	#%00100100	; 
   2488  fd54		       c3		      .byte.b	#%11000011	;	
   2489  fd55
   2490  fd55				   CH
   2491  fd55		       a5		      .byte.b	#%10100101	;
   2492  fd56		       a5		      .byte.b	#%10100101	; 
   2493  fd57		       e7		      .byte.b	#%11100111	; 
   2494  fd58		       a5		      .byte.b	#%10100101	; 
   2495  fd59		       a5		      .byte.b	#%10100101	;
   2496  fd5a
   2497  fd5a				   CK
   2498  fd5a		       a5		      .byte.b	#%10100101	;
   2499  fd5b		       a5		      .byte.b	#%10100101	; 
   2500  fd5c		       66		      .byte.b	#%01100110	; 
   2501  fd5d		       a5		      .byte.b	#%10100101	; 
   2502  fd5e		       a5		      .byte.b	#%10100101	;
   2503  fd5f
   2504  fd5f				   CL
   2505  fd5f		       e7		      .byte.b	#%11100111	;
   2506  fd60		       24		      .byte.b	#%00100100	; 
   2507  fd61		       24		      .byte.b	#%00100100	; 
   2508  fd62		       24		      .byte.b	#%00100100	; 
   2509  fd63		       24		      .byte.b	#%00100100	;
   2510  fd64
   2511  fd64				   CI
   2512  fd64		       42		      .byte.b	#%01000010	;
   2513  fd65		       42		      .byte.b	#%01000010	; 
   2514  fd66		       42		      .byte.b	#%01000010	; 
   2515  fd67		       42		      .byte.b	#%01000010	; 
   2516  fd68		       42		      .byte.b	#%01000010	;
   2517  fd69
   2518  fd69				   CM
   2519  fd69		       a5		      .byte.b	#%10100101	;
   2520  fd6a		       a5		      .byte.b	#%10100101	; 
   2521  fd6b		       a5		      .byte.b	#%10100101	; 
   2522  fd6c		       e7		      .byte.b	#%11100111	; 
   2523  fd6d		       a5		      .byte.b	#%10100101	;
   2524  fd6e
   2525  fd6e				   CN
   2526  fd6e		       a5		      .byte.b	#%10100101	;
   2527  fd6f		       a5		      .byte.b	#%10100101	; 
   2528  fd70		       a5		      .byte.b	#%10100101	; 
   2529  fd71		       a5		      .byte.b	#%10100101	; 
   2530  fd72		       66		      .byte.b	#%01100110	;	
   2531  fd73
   2532  fd73
   2533  fd73				   CO
   2534  fd73		       42		      .byte.b	#%01000010	;
   2535  fd74		       a5		      .byte.b	#%10100101	; 
   2536  fd75		       a5		      .byte.b	#%10100101	; 
   2537  fd76		       a5		      .byte.b	#%10100101	; 
   2538  fd77		       42		      .byte.b	#%01000010	;	
   2539  fd78
   2540  fd78				   CP
   2541  fd78		       24		      .byte.b	#%00100100	;
   2542  fd79		       24		      .byte.b	#%00100100	; 
   2543  fd7a		       e7		      .byte.b	#%11100111	; 
   2544  fd7b		       a5		      .byte.b	#%10100101	; 
   2545  fd7c		       e7		      .byte.b	#%11100111	;
   2546  fd7d
   2547  fd7d				   CR
   2548  fd7d		       a5		      .byte.b	#%10100101	;
   2549  fd7e		       a5		      .byte.b	#%10100101	; 
   2550  fd7f		       66		      .byte.b	#%01100110	; 
   2551  fd80		       a5		      .byte.b	#%10100101	; 
   2552  fd81		       66		      .byte.b	#%01100110	;
   2553  fd82
   2554  fd82				   CS
   2555  fd82		       66		      .byte.b	#%01100110	;
   2556  fd83		       81		      .byte.b	#%10000001	; 
   2557  fd84		       42		      .byte.b	#%01000010	; 
   2558  fd85		       24		      .byte.b	#%00100100	; 
   2559  fd86		       c3		      .byte.b	#%11000011	;
   2560  fd87
   2561  fd87				   CT
   2562  fd87		       42		      .byte.b	#%01000010	;
   2563  fd88		       42		      .byte.b	#%01000010	; 
   2564  fd89		       42		      .byte.b	#%01000010	; 
   2565  fd8a		       42		      .byte.b	#%01000010	; 
   2566  fd8b		       e7		      .byte.b	#%11100111	;
   2567  fd8c
   2568  fd8c				   CV
   2569  fd8c		       42		      .byte.b	#%01000010	;
   2570  fd8d		       a5		      .byte.b	#%10100101	; 
   2571  fd8e		       a5		      .byte.b	#%10100101	; 
   2572  fd8f		       a5		      .byte.b	#%10100101	; 
   2573  fd90		       a5		      .byte.b	#%10100101	;	
   2574  fd91
   2575  fd91				   CY
   2576  fd91		       42		      .byte.b	#%01000010	;
   2577  fd92		       42		      .byte.b	#%01000010	; 
   2578  fd93		       42		      .byte.b	#%01000010	; 
   2579  fd94		       a5		      .byte.b	#%10100101	; 
   2580  fd95		       a5		      .byte.b	#%10100101	;
   2581  fd96
   2582  fd96				   CW
   2583  fd96		       a5		      .byte.b	#%10100101	;
   2584  fd97		       e7		      .byte.b	#%11100111	; 
   2585  fd98		       a5		      .byte.b	#%10100101	; 
   2586  fd99		       a5		      .byte.b	#%10100101	; 
   2587  fd9a		       a5		      .byte.b	#%10100101	;
   2588  fd9b
   2589  fd9b				   CZ
   2590  fd9b		       e7		      .byte.b	#%11100111	;
   2591  fd9c		       24		      .byte.b	#%00100100	; 
   2592  fd9d		       42		      .byte.b	#%01000010	; 
   2593  fd9e		       81		      .byte.b	#%10000001	; 
   2594  fd9f		       e7		      .byte.b	#%11100111	;
   2595  fda0
   2596  fda0				   Pipe
   2597  fda0		       42		      .byte.b	#%01000010	;
   2598  fda1		       00		      .byte.b	#%00000000	; 
   2599  fda2		       42		      .byte.b	#%01000010	; 
   2600  fda3		       00		      .byte.b	#%00000000	; 
   2601  fda4		       42		      .byte.b	#%01000010	;
   2602  fda5
   2603  fda5				   Exclamation
   2604  fda5		       42		      .byte.b	#%01000010	;
   2605  fda6		       00		      .byte.b	#%00000000	; 
   2606  fda7		       42		      .byte.b	#%01000010	; 
   2607  fda8		       42		      .byte.b	#%01000010	; 
   2608  fda9		       42		      .byte.b	#%01000010	;
   2609  fdaa
   2610  fdaa				   Dot
   2611  fdaa		       42		      .byte.b	#%01000010	;
   2612  fdab		       42		      .byte.b	#%01000010	; 
   2613  fdac		       00		      .byte.b	#%00000000	; 
   2614  fdad		       00		      .byte.b	#%00000000	; 
   2615  fdae		       00		      .byte.b	#%00000000	;
   2616  fdaf
   2617  fdaf				   Colon
   2618  fdaf		       42		      .byte.b	#%01000010	;
   2619  fdb0		       42		      .byte.b	#%01000010	; 
   2620  fdb1		       00		      .byte.b	#%00000000	; 
   2621  fdb2		       42		      .byte.b	#%01000010	; 
   2622  fdb3		       42		      .byte.b	#%01000010	;
   2623  fdb4
   2624  fdb4				   Triangle
   2625  fdb4		       81		      .byte.b	#%10000001	;
   2626  fdb5		       c3		      .byte.b	#%11000011	; 
   2627  fdb6		       e7		      .byte.b	#%11100111	; 
   2628  fdb7		       c3		      .byte.b	#%11000011	; 
   2629  fdb8		       81		      .byte.b	#%10000001	;
   2630  fdb9
   2631  fdb9				   Space		; Moved from the beggining so 0 to F is fast to draw.
   2632  fdb9		       00		      .byte.b	#0	;
   2633  fdba		       00		      .byte.b	#0	;
   2634  fdbb		       00		      .byte.b	#0	;
   2635  fdbc		       00		      .byte.b	#0	;
   2636  fdbd		       00		      .byte.b	#0	;
   2637  fdbe
   2638  fdbe				   FontLookup		; Very fast font lookup for dynamic values!
   2639  fdbe		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2640  fdbf		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2641  fdc0		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2642  fdc1		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2643  fdc2		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2644  fdc3		       1d		      .byte.b	#<C5 + #FONT_OFFSET
   2645  fdc4		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2646  fdc5		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2647  fdc6		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2648  fdc7		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2649  fdc8		       36		      .byte.b	#<CA + #FONT_OFFSET
   2650  fdc9		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2651  fdca		       40		      .byte.b	#<CC + #FONT_OFFSET
   2652  fdcb		       45		      .byte.b	#<CD + #FONT_OFFSET
   2653  fdcc		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2654  fdcd		       4f		      .byte.b	#<CF + #FONT_OFFSET
   2655  fdce		       54		      .byte.b	#<CG + #FONT_OFFSET
   2656  fdcf
   2657  fdcf				   EngineSoundType
   2658  fdcf		       02		      .byte.b	#2
   2659  fdd0		       02		      .byte.b	#2
   2660  fdd1		       0e		      .byte.b	#14
   2661  fdd2		       06		      .byte.b	#6
   2662  fdd3		       06		      .byte.b	#6
   2663  fdd4		       0e		      .byte.b	#14
   2664  fdd5
   2665  fdd5				   EngineBaseFrequence
   2666  fdd5		       1f		      .byte.b	#31
   2667  fdd6		       15		      .byte.b	#21
   2668  fdd7		       14		      .byte.b	#20
   2669  fdd8		       1f		      .byte.b	#31
   2670  fdd9		       16		      .byte.b	#22
   2671  fdda		       03		      .byte.b	#3
   2672  fddb
   2673  fddb				   TachometerSizeLookup1
   2674  fddb		       1f		      .byte.b	#%00011111
   2675  fddc		       3f		      .byte.b	#%00111111
   2676  fddd		       7f		      .byte.b	#%01111111
   2677  fdde		       ff		      .byte.b	#%11111111
   2678  fddf		       ff		      .byte.b	#%11111111
   2679  fde0		       ff		      .byte.b	#%11111111
   2680  fde1		       ff		      .byte.b	#%11111111
   2681  fde2		       ff		      .byte.b	#%11111111
   2682  fde3
   2683  fde3				   TachometerSizeLookup2
   2684  fde3		       00		      .byte.b	#%00000000
   2685  fde4		       00		      .byte.b	#%00000000
   2686  fde5		       00		      .byte.b	#%00000000
   2687  fde6		       00		      .byte.b	#%00000000
   2688  fde7		       80		      .byte.b	#%10000000
   2689  fde8		       c0		      .byte.b	#%11000000
   2690  fde9		       e0		      .byte.b	#%11100000
   2691  fdea		       f0		      .byte.b	#%11110000
   2692  fdeb
   2693  fdeb				   TachometerGearLookup
   2694  fdeb		       01		      .byte.b	#%00000001
   2695  fdec		       02		      .byte.b	#%00000010
   2696  fded		       04		      .byte.b	#%00000100
   2697  fdee		       08		      .byte.b	#%00001000
   2698  fdef		       10		      .byte.b	#%00010000
   2699  fdf0		       30		      .byte.b	#%00110000
   2700  fdf1
   2701  fe00					      org	$FE00
   2702  fe00				   AesTable
   2703  fe00		       63 7c 77 7b*	      DC.B	$63,$7c,$77,$7b,$f2,$6b,$6f,$c5,$30,$01,$67,$2b,$fe,$d7,$ab,$76
   2704  fe10		       ca 82 c9 7d*	      DC.B	$ca,$82,$c9,$7d,$fa,$59,$47,$f0,$ad,$d4,$a2,$af,$9c,$a4,$72,$c0
   2705  fe20		       b7 fd 93 26*	      DC.B	$b7,$fd,$93,$26,$36,$3f,$f7,$cc,$34,$a5,$e5,$f1,$71,$d8,$31,$15
   2706  fe30		       04 c7 23 c3*	      DC.B	$04,$c7,$23,$c3,$18,$96,$05,$9a,$07,$12,$80,$e2,$eb,$27,$b2,$75
   2707  fe40		       09 83 2c 1a*	      DC.B	$09,$83,$2c,$1a,$1b,$6e,$5a,$a0,$52,$3b,$d6,$b3,$29,$e3,$2f,$84
   2708  fe50		       53 d1 00 ed*	      DC.B	$53,$d1,$00,$ed,$20,$fc,$b1,$5b,$6a,$cb,$be,$39,$4a,$4c,$58,$cf
   2709  fe60		       d0 ef aa fb*	      DC.B	$d0,$ef,$aa,$fb,$43,$4d,$33,$85,$45,$f9,$02,$7f,$50,$3c,$9f,$a8
   2710  fe70		       51 a3 40 8f*	      DC.B	$51,$a3,$40,$8f,$92,$9d,$38,$f5,$bc,$b6,$da,$21,$10,$ff,$f3,$d2
   2711  fe80		       cd 0c 13 ec*	      DC.B	$cd,$0c,$13,$ec,$5f,$97,$44,$17,$c4,$a7,$7e,$3d,$64,$5d,$19,$73
   2712  fe90		       60 81 4f dc*	      DC.B	$60,$81,$4f,$dc,$22,$2a,$90,$88,$46,$ee,$b8,$14,$de,$5e,$0b,$db
   2713  fea0		       e0 32 3a 0a*	      DC.B	$e0,$32,$3a,$0a,$49,$06,$24,$5c,$c2,$d3,$ac,$62,$91,$95,$e4,$79
   2714  feb0		       e7 c8 37 6d*	      DC.B	$e7,$c8,$37,$6d,$8d,$d5,$4e,$a9,$6c,$56,$f4,$ea,$65,$7a,$ae,$08
   2715  fec0		       ba 78 25 2e*	      DC.B	$ba,$78,$25,$2e,$1c,$a6,$b4,$c6,$e8,$dd,$74,$1f,$4b,$bd,$8b,$8a
   2716  fed0		       70 3e b5 66*	      DC.B	$70,$3e,$b5,$66,$48,$03,$f6,$0e,$61,$35,$57,$b9,$86,$c1,$1d,$9e
   2717  fee0		       e1 f8 98 11*	      DC.B	$e1,$f8,$98,$11,$69,$d9,$8e,$94,$9b,$1e,$87,$e9,$ce,$55,$28,$df
   2718  fef0		       8c a1 89 0d*	      DC.B	$8c,$a1,$89,$0d,$bf,$e6,$42,$68,$41,$99,$2d,$0f,$b0,$54,$bb,$16
   2719  ff00
   2720  ff00							; From FF00 to FFFB (122 bytes) to use here
   2721  ff00
   2722  ff00				   StaticText		; All static text must be on the same MSB block. 
   2723  ff00				   CheckpointText		; Only the LSB, which is the offset.
   2724  ff00		       40		      .byte.b	#<CC + #FONT_OFFSET
   2725  ff01		       5e		      .byte.b	#<CK + #FONT_OFFSET
   2726  ff02		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2727  ff03		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2728  ff04		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2729  ff05
   2730  ff05				   HellwayLeftText
   2731  ff05		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2732  ff06		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2733  ff07		       59		      .byte.b	#<CH + #FONT_OFFSET
   2734  ff08		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2735  ff09		       63		      .byte.b	#<CL + #FONT_OFFSET
   2736  ff0a
   2737  ff0a				   HellwayRightText
   2738  ff0a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2739  ff0b		       9a		      .byte.b	#<CW + #FONT_OFFSET
   2740  ff0c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2741  ff0d		       95		      .byte.b	#<CY + #FONT_OFFSET
   2742  ff0e		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2743  ff0f
   2744  ff0f				   OpbText
   2745  ff0f		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2746  ff10		       a4		      .byte.b	#<Pipe + #FONT_OFFSET
   2747  ff11		       77		      .byte.b	#<CO + #FONT_OFFSET
   2748  ff12		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2749  ff13		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2750  ff14
   2751  ff14				   YearText
   2752  ff14		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2753  ff15		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2754  ff16		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2755  ff17		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2756  ff18		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2757  ff19
   2758  ff19				   GameText
   2759  ff19		       54		      .byte.b	#<CG + #FONT_OFFSET
   2760  ff1a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2761  ff1b		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2762  ff1c		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2763  ff1d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2764  ff1e
   2765  ff1e				   OverText
   2766  ff1e		       77		      .byte.b	#<CO + #FONT_OFFSET
   2767  ff1f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2768  ff20		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2769  ff21		       81		      .byte.b	#<CR + #FONT_OFFSET
   2770  ff22		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2771  ff23				   GoText
   2772  ff23		       54		      .byte.b	#<CG + #FONT_OFFSET
   2773  ff24		       77		      .byte.b	#<CO + #FONT_OFFSET
   2774  ff25		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2775  ff26		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2776  ff27		       a9		      .byte.b	#<Exclamation + #FONT_OFFSET
   2777  ff28
   2778  ff28				   ZeldaTextLeft
   2779  ff28		       9f		      .byte.b	#<CZ + #FONT_OFFSET
   2780  ff29		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2781  ff2a		       63		      .byte.b	#<CL + #FONT_OFFSET
   2782  ff2b		       45		      .byte.b	#<CD + #FONT_OFFSET
   2783  ff2c		       36		      .byte.b	#<CA + #FONT_OFFSET
   2784  ff2d
   2785  ff2d				   ZeldaTextRight
   2786  ff2d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2787  ff2e		       6d		      .byte.b	#<CM + #FONT_OFFSET
   2788  ff2f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2789  ff30		       3b		      .byte.b	#<CB + #FONT_OFFSET
   2790  ff31		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2791  ff32
   2792  ff32				   ZeldaDateLeft
   2793  ff32		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2794  ff33		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2795  ff34		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2796  ff35		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2797  ff36		       22		      .byte.b	#<C6 + #FONT_OFFSET
   2798  ff37
   2799  ff37				   ZeldaDateRight
   2800  ff37		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2801  ff38		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2802  ff39		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2803  ff3a		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2804  ff3b		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2805  ff3c
   2806  ff3c				   PolvinhosTextLeft
   2807  ff3c		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2808  ff3d		       77		      .byte.b	#<CO + #FONT_OFFSET
   2809  ff3e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2810  ff3f		       90		      .byte.b	#<CV + #FONT_OFFSET
   2811  ff40		       68		      .byte.b	#<CI + #FONT_OFFSET
   2812  ff41
   2813  ff41				   PolvinhosTextRight
   2814  ff41		       72		      .byte.b	#<CN + #FONT_OFFSET
   2815  ff42		       59		      .byte.b	#<CH + #FONT_OFFSET
   2816  ff43		       77		      .byte.b	#<CO + #FONT_OFFSET
   2817  ff44		       86		      .byte.b	#<CS + #FONT_OFFSET
   2818  ff45		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2819  ff46
   2820  ff46				   PolvinhosDateLeft
   2821  ff46		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2822  ff47		       27		      .byte.b	#<C7 + #FONT_OFFSET
   2823  ff48		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2824  ff49		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2825  ff4a		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2826  ff4b
   2827  ff4b				   PolvinhosDateRight
   2828  ff4b		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2829  ff4c		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2830  ff4d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2831  ff4e		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2832  ff4f		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2833  ff50
   2834  ff50				   IvonneTextLeft
   2835  ff50		       90		      .byte.b	#<CV + #FONT_OFFSET
   2836  ff51		       77		      .byte.b	#<CO + #FONT_OFFSET
   2837  ff52		       36		      .byte.b	#<CA + #FONT_OFFSET
   2838  ff53		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2839  ff54		       68		      .byte.b	#<CI + #FONT_OFFSET
   2840  ff55
   2841  ff55				   IvonneTextRight
   2842  ff55		       90		      .byte.b	#<CV + #FONT_OFFSET
   2843  ff56		       77		      .byte.b	#<CO + #FONT_OFFSET
   2844  ff57		       72		      .byte.b	#<CN + #FONT_OFFSET
   2845  ff58		       72		      .byte.b	#<CN + #FONT_OFFSET
   2846  ff59		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2847  ff5a
   2848  ff5a				   IvonneDateLeft
   2849  ff5a		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2850  ff5b		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2851  ff5c		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2852  ff5d		       04		      .byte.b	#<C0 + #FONT_OFFSET
   2853  ff5e		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2854  ff5f
   2855  ff5f				   IvonneDateRight
   2856  ff5f		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2857  ff60		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2858  ff61		       31		      .byte.b	#<C9 + #FONT_OFFSET
   2859  ff62		       0e		      .byte.b	#<C2 + #FONT_OFFSET
   2860  ff63		       2c		      .byte.b	#<C8 + #FONT_OFFSET
   2861  ff64
   2862  ff64				   PaperArtTextLeft
   2863  ff64		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2864  ff65		       36		      .byte.b	#<CA + #FONT_OFFSET
   2865  ff66		       7c		      .byte.b	#<CP + #FONT_OFFSET
   2866  ff67		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2867  ff68		       81		      .byte.b	#<CR + #FONT_OFFSET
   2868  ff69
   2869  ff69				   PaperArtTextRight
   2870  ff69		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2871  ff6a		       36		      .byte.b	#<CA + #FONT_OFFSET
   2872  ff6b		       81		      .byte.b	#<CR + #FONT_OFFSET
   2873  ff6c		       8b		      .byte.b	#<CT + #FONT_OFFSET
   2874  ff6d		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2875  ff6e
   2876  ff6e				   LeonardoTextLeft
   2877  ff6e		       63		      .byte.b	#<CL + #FONT_OFFSET
   2878  ff6f		       4a		      .byte.b	#<CE + #FONT_OFFSET
   2879  ff70		       77		      .byte.b	#<CO + #FONT_OFFSET
   2880  ff71		       72		      .byte.b	#<CN + #FONT_OFFSET
   2881  ff72		       36		      .byte.b	#<CA + #FONT_OFFSET
   2882  ff73
   2883  ff73				   LeonardoTextRight
   2884  ff73		       81		      .byte.b	#<CR + #FONT_OFFSET
   2885  ff74		       45		      .byte.b	#<CD + #FONT_OFFSET
   2886  ff75		       77		      .byte.b	#<CO + #FONT_OFFSET
   2887  ff76		       bd		      .byte.b	#<Space + #FONT_OFFSET
   2888  ff77		       72		      .byte.b	#<CN + #FONT_OFFSET
   2889  ff78
   2890  ff78				   VersionText
   2891  ff78		       09		      .byte.b	#<C1 + #FONT_OFFSET
   2892  ff79		       ae		      .byte.b	#<Dot + #FONT_OFFSET
   2893  ff7a		       18		      .byte.b	#<C4 + #FONT_OFFSET
   2894  ff7b		       13		      .byte.b	#<C3 + #FONT_OFFSET
   2895  ff7c		       b8		      .byte.b	#<Triangle + #FONT_OFFSET
   2896  ff7d
   2897  ff7d
   2898  ff7d				   EndStaticText
   2899  ff7d
   2900  ff7d				   CarSprite0		; Upside down, Original Car
   2901  ff7d		       00 00 00 00*	      ds	7
   2902  ff84		       7e		      .byte.b	#%01111110
   2903  ff85		       24		      .byte.b	#%00100100
   2904  ff86		       bd		      .byte.b	#%10111101
   2905  ff87		       3c		      .byte.b	#%00111100
   2906  ff88		       bd		      .byte.b	#%10111101
   2907  ff89		       3c		      .byte.b	#%00111100
   2908  ff8a
   2909  ff8a				   CarSprite1		; Car variant posted by KevinMos3 (AtariAge), thanks!
   2910  ff8a		       00 00 00 00*	      ds	7
   2911  ff91		       bd		      .byte.b	#%10111101
   2912  ff92		       7e		      .byte.b	#%01111110
   2913  ff93		       5a		      .byte.b	#%01011010
   2914  ff94		       66		      .byte.b	#%01100110
   2915  ff95		       bd		      .byte.b	#%10111101
   2916  ff96		       3c		      .byte.b	#%00111100
   2917  ff97
   2918  ff97				   CarSprite2		; Car variant posted by TIX (AtariAge), his normal car, thanks!
   2919  ff97		       00 00 00 00*	      ds	7
   2920  ff9e		       7e		      .byte.b	#%01111110
   2921  ff9f		       a5		      .byte.b	#%10100101
   2922  ffa0		       42		      .byte.b	#%01000010
   2923  ffa1		       42		      .byte.b	#%01000010
   2924  ffa2		       bd		      .byte.b	#%10111101
   2925  ffa3		       7e		      .byte.b	#%01111110
   2926  ffa4
   2927  ffa4				   CarSprite3		; Car variant posted by TIX (AtariAge), dragster, thanks!
   2928  ffa4		       00 00 00 00*	      ds	7
   2929  ffab		       3c		      .byte.b	#%00111100
   2930  ffac		       db		      .byte.b	#%11011011
   2931  ffad		       db		      .byte.b	#%11011011
   2932  ffae		       3c		      .byte.b	#%00111100
   2933  ffaf		       5a		      .byte.b	#%01011010
   2934  ffb0		       3c		      .byte.b	#%00111100
   2935  ffb1
   2936  ffb1				   TrafficSpeeds
   2937  ffb1		       00		      .byte.b	#$00	;  Trafic0 L
   2938  ffb2		       00		      .byte.b	#$00	;  Trafic0 H
   2939  ffb3		       0a		      .byte.b	#$0A	;  Trafic1 L
   2940  ffb4		       01		      .byte.b	#$01	;  Trafic1 H
   2941  ffb5		       e6		      .byte.b	#$E6	;  Trafic2 L
   2942  ffb6		       00		      .byte.b	#$00	;  Trafic2 H
   2943  ffb7		       c2		      .byte.b	#$C2	;  Trafic3 L
   2944  ffb8		       00		      .byte.b	#$00	;  Trafic3 H
   2945  ffb9		       9e		      .byte.b	#$9E	;  Trafic4 L
   2946  ffba		       00		      .byte.b	#$00	;  Trafic4 H
   2947  ffbb				   TrafficSpeedsHighDelta
   2948  ffbb		       00		      .byte.b	#$00	;  Trafic0 L
   2949  ffbc		       00		      .byte.b	#$00	;  Trafic0 H
   2950  ffbd		       0a		      .byte.b	#$0A	;  Trafic1 L
   2951  ffbe		       01		      .byte.b	#$01	;  Trafic1 H
   2952  ffbf		       c8		      .byte.b	#$C8	;  Trafic2 L
   2953  ffc0		       00		      .byte.b	#$00	;  Trafic2 H
   2954  ffc1		       86		      .byte.b	#$86	;  Trafic3 L
   2955  ffc2		       00		      .byte.b	#$00	;  Trafic3 H
   2956  ffc3		       44		      .byte.b	#$44	;  Trafic4 L
   2957  ffc4		       00		      .byte.b	#$00	;  Trafic4 H
   2958  ffc5
   2959  ffc5				   CarIdToSpriteAddressL
   2960  ffc5		       7d		      .byte.b	#<CarSprite0
   2961  ffc6		       8a		      .byte.b	#<CarSprite1
   2962  ffc7		       97		      .byte.b	#<CarSprite2
   2963  ffc8		       a4		      .byte.b	#<CarSprite3
   2964  ffc9
   2965  ffc9				   CarIdToSpriteAddressH
   2966  ffc9		       ff		      .byte.b	#>CarSprite0
   2967  ffca		       ff		      .byte.b	#>CarSprite1
   2968  ffcb		       ff		      .byte.b	#>CarSprite2
   2969  ffcc		       ff		      .byte.b	#>CarSprite3
   2970  ffcd
   2971  ffcd				   CarIdToAccelerateSpeed
   2972  ffcd		       80		      .byte.b	#128
   2973  ffce		       c0		      .byte.b	#192
   2974  ffcf		       60		      .byte.b	#96
   2975  ffd0		       c0		      .byte.b	#192
   2976  ffd1
   2977  ffd1				   CarIdToTimeoverBreakInterval 		; Glide
   2978  ffd1		       03		      .byte.b	#%00000011	;Every 4 frames
   2979  ffd2		       03		      .byte.b	#%00000011	;Every 4 frames
   2980  ffd3		       0f		      .byte.b	#%00001111	;Every 16 frames
   2981  ffd4		       03		      .byte.b	#%00000011	;Every 4 frames
   2982  ffd5
   2983  ffd5				   CarIdToMaxSpeedL
   2984  ffd5		       80		      .byte.b	#$80
   2985  ffd6		       00		      .byte.b	#$00	; One less gear
   2986  ffd7		       80		      .byte.b	#$80
   2987  ffd8		       80		      .byte.b	#$80
   2988  ffd9
   2989  ffd9				   CarIdToMaxGear
   2990  ffd9		       05		      .byte.b	#5
   2991  ffda		       04		      .byte.b	#4	; One less gear
   2992  ffdb		       05		      .byte.b	#5
   2993  ffdc		       05		      .byte.b	#5
   2994  ffdd
   2995  ffdd				   GearToBreakSpeedTable
   2996  ffdd		       09		      .byte.b	#(BREAK_SPEED - 1)
   2997  ffde		       09		      .byte.b	#(BREAK_SPEED - 1)
   2998  ffdf		       0a		      .byte.b	#(BREAK_SPEED + 0)
   2999  ffe0		       0a		      .byte.b	#(BREAK_SPEED + 0)
   3000  ffe1		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3001  ffe2		       0c		      .byte.b	#(BREAK_SPEED + 2)
   3002  ffe3
   3003  ffe3				   TrafficColorTable
   3004  ffe3		       d4		      .byte.b	#TRAFFIC_COLOR_LIGHT
   3005  ffe4		       34		      .byte.b	#TRAFFIC_COLOR_REGULAR
   3006  ffe5		       79		      .byte.b	#TRAFFIC_COLOR_INTENSE
   3007  ffe6		       09		      .byte.b	#TRAFFIC_COLOR_RUSH_HOUR
   3008  ffe7
   3009  ffe7				   TrafficChanceTable
   3010  ffe7		       0e		      .byte.b	#TRAFFIC_CHANCE_LIGHT
   3011  ffe8		       18		      .byte.b	#TRAFFIC_CHANCE_REGULAR
   3012  ffe9		       22		      .byte.b	#TRAFFIC_CHANCE_INTENSE
   3013  ffea		       2c		      .byte.b	#TRAFFIC_CHANCE_RUSH_HOUR
   3014  ffeb
   3015  ffeb				   TrafficTimeTable
   3016  ffeb		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT
   3017  ffec		       22		      .byte.b	#CHECKPOINT_TIME_REGULAR
   3018  ffed		       27		      .byte.b	#CHECKPOINT_TIME_INTENSE
   3019  ffee		       2c		      .byte.b	#CHECKPOINT_TIME_RUSH_HOUR
   3020  ffef		       1d		      .byte.b	#CHECKPOINT_TIME_LIGHT	; For cycling, makes code easier
   3021  fff0
   3022  fff0
   3023  fffc					      org	$FFFC
   3024  fffc		       00 f0		      .word.w	BeforeStart
   3025  fffe		       00 f0		      .word.w	BeforeStart	; Can be used for subrotine (BRK)
